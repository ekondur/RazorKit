{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to RazorKit","text":"<p>RazorKit is a collection of lightweight, fluent-style Razor HTML helpers that make it easy for developers to integrate popular JavaScript libraries into their ASP.NET applications.  With RazorKit, you can quickly implement features from libraries like Chart.js and DataTables, without the hassle of writing complex JavaScript or HTML code manually.</p>"},{"location":"#using-datatables","title":"Using DataTables","text":"<p>Install the RazorKit.DataTables package from nuget.</p> <pre><code>PM&gt; Install-Package RazorKit.DataTables\n</code></pre> <p>Add related scripts and style links and implement. Reference:</p> cshtmlcontroller <pre><code>@using RazorKit\n\n@(Html.DataTable&lt;Person&gt;()\n    .Columns(c =&gt;\n    {\n        c.Field(f =&gt; f.Id).Visible(false);\n        c.Field(f =&gt; f.Name).Title(\"Name\");\n    })\n    .DataSource(ds =&gt; ds\n        .URL(Url.Action(\"GetDataResult\"))\n        .Method(\"POST\")\n        .Naming(Convention.CamelCase))\n    .ServerSide(true)\n    .Render()\n)\n</code></pre> <pre><code>using RazorKit.DataTables;\n\n[HttpPost]\npublic JsonResult GetDataResult(DataRequest request)\n{\n     var result = ctx.People.ToDataResult(request);\n     return Json(result);\n}\n</code></pre>"},{"location":"#using-chartjs","title":"Using ChartJs","text":"<p>Install the RazorKit.ChartJs package from nuget.</p> <pre><code>PM&gt; Install-Package RazorKit.ChartJs\n</code></pre> <p>Add related scripts and implement. Reference:</p> <pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/chart.js\"&gt;&lt;/script&gt;\n\n@using RazorKit\n\n@(Html.Chart(\"canvasId\")\n    .Data(d =&gt; d\n        .Labels(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\")\n        .Datasets(ds =&gt; ds\n            .Line()\n            .Label(\"Line Chart\")\n            .Data(65, 59, 80, 81, 56, 55, 40)\n        )\n    )\n    .Render()\n)\n</code></pre>"},{"location":"chartjs/","title":"RazorKit.ChartJs","text":"<p>RazorKit.ChartJs is a powerful library that simplifies the integration of the Chart.js library into Razor views. With a fluent builder style, developers can effortlessly create highly functional and customizable charts.</p>"},{"location":"chartjs/#features","title":"Features","text":"<ul> <li>Fluent API: Create charts using an intuitive builder pattern.</li> <li>Customization: Easily configure datasets, options, and advanced features.</li> <li>Integration: Designed to work seamlessly with Chart.js.</li> </ul>"},{"location":"chartjs/#setup","title":"Setup","text":"<p>Install the NuGet package:</p> <p><pre><code>dotnet add package RazorKit.ChartJs\n</code></pre> or <pre><code>PM&gt; Install-Package RazorKit.ChartJs\n</code></pre></p> <p>Add needed script and style links to layout: Reference:</p> <p><pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/chart.js\"&gt;&lt;/script&gt;\n</code></pre> It is easy to implement with html helper:</p> cshtml<pre><code>@using RazorKit\n\n@(Html.Chart(\"canvasId\")\n    .Data(d =&gt; d\n        .Labels(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\")\n        .Datasets(ds =&gt; ds\n            .Line()\n            .Label(\"Line Chart\")\n            .Data(65, 59, 80, 81, 56, 55, 40)\n        )\n    )\n    .Render()\n)\n</code></pre>"},{"location":"chartjs/animation/","title":"Animation","text":""},{"location":"chartjs/animation/#duration","title":"Duration","text":"<p>The number of milliseconds an animation takes. Default 1000 <pre><code>.Duration(15)\n</code></pre></p>"},{"location":"chartjs/animation/#easing","title":"Easing","text":"<p>Easing function to use. Default 'easeOutQuart' <pre><code>.Easing(default)\n</code></pre></p>"},{"location":"chartjs/animation/#delay","title":"Delay","text":"<p>Delay before starting the animations. <pre><code>.Delay(15)\n</code></pre></p>"},{"location":"chartjs/animation/#loop","title":"Loop","text":"<p>If set to true, the animations loop endlessly. <pre><code>.Loop(true)\n</code></pre></p>"},{"location":"chartjs/animation/#onprogress","title":"OnProgress","text":"<p>Callback called on each step of an animation. <pre><code>.OnProgress(\"example\")\n</code></pre></p>"},{"location":"chartjs/animation/#oncomplete","title":"OnComplete","text":"<p>Callback called when all animations are completed. <pre><code>.OnComplete(\"example\")\n</code></pre></p>"},{"location":"chartjs/animation/#from","title":"From","text":"<p>Start value for the animation. Current value is used when undefined. <pre><code>.From(true)\n</code></pre></p>"},{"location":"chartjs/animation/#from_1","title":"From","text":"<p>Start value for the animation. Current value is used when undefined. <pre><code>.From(15)\n</code></pre></p>"},{"location":"chartjs/animation/#from_2","title":"From","text":"<p>Start value for the animation. Current value is used when undefined. <pre><code>.From(\"example\")\n</code></pre></p>"},{"location":"chartjs/animation/#to","title":"To","text":"<p>End value for the animation. Updated value is used when undefined <pre><code>.To(true)\n</code></pre></p>"},{"location":"chartjs/animation/#to_1","title":"To","text":"<p>End value for the animation. Updated value is used when undefined <pre><code>.To(15)\n</code></pre></p>"},{"location":"chartjs/animation/#to_2","title":"To","text":"<p>End value for the animation. Updated value is used when undefined <pre><code>.To(\"example\")\n</code></pre></p>"},{"location":"chartjs/configuration/","title":"Configuration","text":""},{"location":"chartjs/configuration/#labels","title":"Labels","text":"<p>Labels are used to define the categories or points along the <code>x-axis</code> or <code>y-axis</code> of a chart.  They help describe the data points visually, making the chart easier to interpret. <pre><code>@(Html.Chart(\"canvasId\")\n    .Data(d =&gt; d\n        .Labels(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\")\n        .Datasets(ds =&gt; ds\n            ...\n        )\n    )\n    .Render()\n)\n</code></pre></p>"},{"location":"chartjs/configuration/#datasets","title":"Datasets","text":"<p>A dataset represents a group of related data that is displayed in a chart. <pre><code>.Datasets(ds =&gt; ds\n    .Line()\n    .Label(\"Line Chart\")\n    .Data(65, 59, 80, 81, 56, 55, 40)\n    ...\n)\n</code></pre> Each dataset corresponds to a specific series or group of data points, and its appearance is customizable. <pre><code>.Datasets(ds =&gt;\n{\n    ds.Bar().Label(\"Bar Dataset\").Data(10, 20, 30, 40);\n    ds.Line().Label(\"Line Dataset\").Data(50, 40, 45, 50);\n})\n</code></pre></p>"},{"location":"chartjs/configuration/#responsive-charts","title":"Responsive Charts","text":"<p>When it comes to changing the chart size based on the window size, a major limitation is that the canvas render size (<code>canvas.width</code> and <code>.height</code>) can not be expressed with relative values, contrary to the display size (<code>canvas.style.width</code> and <code>.height</code>).  Furthermore, these sizes are independent of each other and thus the canvas render size does not adjust automatically based on the display size, making the rendering inaccurate. </p>"},{"location":"chartjs/configuration/#responsive","title":"Responsive","text":"<p>Resizes the chart canvas when its container does. Default <code>true</code> <pre><code>.Options(o =&gt; o.Responsive(false))\n</code></pre></p>"},{"location":"chartjs/configuration/#maintainaspectratio","title":"MaintainAspectRatio","text":"<p>Maintain the original canvas aspect ratio (<code>width / height</code>) when resizing. Default <code>true</code> <pre><code>.Options(o =&gt; o.MaintainAspectRatio(false))\n</code></pre></p>"},{"location":"chartjs/configuration/#aspectratio","title":"AspectRatio","text":"<p>Canvas aspect ratio (i.e. width / height, a value of 1 representing a square canvas). Note that this option is ignored if the height is explicitly defined either as attribute or via the style. The default value varies by chart type; Radial charts (<code>doughnut, pie, polarArea, radar</code>) default to <code>1</code> and others default to <code>2</code>. <pre><code>.Options(o =&gt; o.AspectRatio(1))\n</code></pre></p>"},{"location":"chartjs/configuration/#onresize","title":"OnResize","text":"<p>Called when a resize occurs. Gets passed two arguments: the chart instance and the new size. <pre><code>.Options(o =&gt; o.OnResize(\"onResize\"))\n</code></pre></p>"},{"location":"chartjs/configuration/#resizedelay","title":"ResizeDelay","text":"<p>Delay the resize update by the given amount of milliseconds. This can ease the resize process by debouncing the update of the elements. Default <code>0</code> <pre><code>.Options(o =&gt; o.ResizeDelay(100))\n</code></pre></p>"},{"location":"chartjs/configuration/#events","title":"Events","text":"<p>The events option defines the browser events that the chart should listen to for. Each of these events trigger hover and are passed to plugins.  <pre><code>.Options(o =&gt; o.Events(ChartEvent.Mousemove, ChartEvent.Touchstart))\n</code></pre></p>"},{"location":"chartjs/configuration/#onhover","title":"OnHover","text":"<p>Called when any of the events fire over chartArea. Passed the event, an array of active elements (bars, points, etc), and the chart. <pre><code>.Options(o =&gt; o.OnHover(\"onHover\"))\n</code></pre></p>"},{"location":"chartjs/configuration/#onclick","title":"OnClick","text":"<p>Called if the event is of type 'mouseup', 'click' or 'contextmenu' over chartArea. Passed the event, an array of active elements, and the chart. <pre><code>.Options(o =&gt; o.OnClick(\"example\"))\n</code></pre></p>"},{"location":"chartjs/configuration/#locale","title":"Locale","text":"<p>For applications where the numbers of ticks on scales must be formatted accordingly with a language sensitive number formatting, you can enable this kind of formatting by setting the locale option.  <pre><code>.Options(o =&gt; o.Locale(\"en-US\"))\n</code></pre></p>"},{"location":"chartjs/configuration/#parsing","title":"Parsing","text":"<p>How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset.  If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally.  <pre><code>.Options(o =&gt; o.Parsing(true))\n</code></pre> Parsing with key. <pre><code>.Options(o =&gt; o.Parsing(\"key\"))\n</code></pre> Parsing with x and y axis keys. <pre><code>.Options(o =&gt; o.Parsing(\"xKey\", \"yKey\"))\n</code></pre></p>"},{"location":"chartjs/interaction/","title":"Interaction","text":""},{"location":"chartjs/interaction/#mode","title":"Mode","text":"<p>Sets which elements appear in the interaction. Default 'nearest' <pre><code>.Mode(default)\n</code></pre></p>"},{"location":"chartjs/interaction/#intersect","title":"Intersect","text":"<p>if true, the interaction mode only applies when the mouse position intersects an item on the chart.             Default true <pre><code>.Intersect(true)\n</code></pre></p>"},{"location":"chartjs/interaction/#axis","title":"Axis","text":"<p>Can be set to 'x', 'y', 'xy' or 'r' to define which directions are used in calculating distances.             Defaults to 'x' for 'index' mode and 'xy' in dataset and 'nearest' modes. <pre><code>.Axis(default)\n</code></pre></p>"},{"location":"chartjs/interaction/#includeinvisible","title":"IncludeInvisible","text":"<p>if true, the invisible points that are outside of the chart area will also be included when evaluating interactions.             Default false <pre><code>.IncludeInvisible(true)\n</code></pre></p>"},{"location":"chartjs/layout/","title":"Layout","text":""},{"location":"chartjs/layout/#autopadding","title":"AutoPadding","text":"<p>Apply automatic padding so visible elements are completely drawn.             default true, scriptable no <pre><code>.AutoPadding(true)\n</code></pre></p>"},{"location":"chartjs/layout/#padding","title":"Padding","text":"<p>The padding to add inside the chart.             default 0, scriptable yes <pre><code>.Padding(15)\n</code></pre></p>"},{"location":"chartjs/layout/#padding_1","title":"Padding","text":"<pre><code>.Padding(default)\n</code></pre>"},{"location":"chartjs/padding/","title":"Padding","text":""},{"location":"chartjs/padding/#left","title":"Left","text":"<p>Left <pre><code>.Left(15)\n</code></pre></p>"},{"location":"chartjs/padding/#right","title":"Right","text":"<p>Right <pre><code>.Right(15)\n</code></pre></p>"},{"location":"chartjs/padding/#top","title":"Top","text":"<p>Top <pre><code>.Top(15)\n</code></pre></p>"},{"location":"chartjs/padding/#bottom","title":"Bottom","text":"<p>Bottom <pre><code>.Bottom(15)\n</code></pre></p>"},{"location":"chartjs/padding/#x","title":"X","text":"<p>This is a shorthand for defining left and right to the same values <pre><code>.X(15)\n</code></pre></p>"},{"location":"chartjs/padding/#y","title":"Y","text":"<p>This is a shorthand for defining top and bottom to the same values <pre><code>.Y(15)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/","title":"Bar Chart","text":""},{"location":"chartjs/datasets/bar/#backgroundcolors","title":"BackgroundColors","text":"<p>Set Backgrounds colors <pre><code>.BackgroundColors(default)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#bordercolors","title":"BorderColors","text":"<p>Set Border Colors <pre><code>.BorderColors(default)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#base","title":"Base","text":"<p>Base value for the bar in data units along the value axis. If not set, defaults to the value axis base value. <pre><code>.Base(15)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#barpercentage","title":"BarPercentage","text":"<p>Percent (0-1) of the available width each bar should be within the category width.             1.0 will take the whole category width and put the bars right next to each other.             Default 0.9 <pre><code>.BarPercentage(default)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#barthickness","title":"BarThickness","text":"<p>If this value is a number, it is applied to the width of each bar, in pixels.              When this is enforced, barPercentage and categoryPercentage are ignored. <pre><code>.BarThickness(15)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#barthickness_1","title":"BarThickness","text":"<p>If set to 'flex', the base sample widths are calculated automatically based on the previous and following samples             so that they take the full available widths without overlap. Then, bars are sized using barPercentage and categoryPercentage.             There is no gap when the percentage options are 1.              This mode generates bars with different widths when data are not evenly spaced. <pre><code>.BarThickness(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#borderskipped","title":"BorderSkipped","text":"<p>This setting is used to avoid drawing the bar stroke at the base of the fill, or disable the border radius.              In general, this does not need to be changed except when creating chart types that derive from a bar chart. <pre><code>.BorderSkipped(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#borderskipped_1","title":"BorderSkipped","text":"<p>This setting is used to avoid drawing the bar stroke at the base of the fill, or disable the border radius.              In general, this does not need to be changed except when creating chart types that derive from a bar chart. <pre><code>.BorderSkipped(true)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#borderwidth","title":"BorderWidth","text":"<p>If this value is a number, it is applied to all sides of the rectangle (left, top, right, bottom), except borderSkipped.             Default 0 <pre><code>.BorderWidth(15)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#borderwidth_1","title":"BorderWidth","text":"<p>If this value is an object, the left property defines the left border width.              Similarly, the right, top, and bottom properties can also be specified. Omitted borders and borderSkipped are skipped. <pre><code>.BorderWidth(15, 15, 15, 15)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#borderradius","title":"BorderRadius","text":"<p>If this value is a number, it is applied to all corners of the rectangle (topLeft, topRight, bottomLeft, bottomRight),             except corners touching the borderSkipped. Default 0 <pre><code>.BorderRadius(15)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#borderradius_1","title":"BorderRadius","text":"<p>If this value is an object, the topLeft property defines the top-left corners border radius.             Similarly, the topRight, bottomLeft, and bottomRight. <pre><code>.BorderRadius(15, 15, 15, 15)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#categorypercentage","title":"CategoryPercentage","text":"<p>Percent (0-1) of the available width each category should be within the sample width. <pre><code>.CategoryPercentage(default)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#grouped","title":"Grouped","text":"<p>Should the bars be grouped on index axis. When true, all the datasets at same index value will be placed next to each other centering on that index value.              When false, each bar is placed on its actual index-axis value. Default true <pre><code>.Grouped(true)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#hoverborderradius","title":"HoverBorderRadius","text":"<p>The bar border radius when hovered (in pixels). Default 0 <pre><code>.HoverBorderRadius(15)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#indexaxis","title":"IndexAxis","text":"<p>The base axis of the dataset. 'x' for vertical bars and 'y' for horizontal bars. <pre><code>.IndexAxis(default)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#order","title":"Order","text":"<p>The drawing order of dataset. Also affects order for stacking, tooltip and legend.             Default 0 <pre><code>.Order(15)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#pointstyle","title":"PointStyle","text":"<p>Is style of the point enabled? <pre><code>.PointStyle(true)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#pointstyle_1","title":"PointStyle","text":"<p>Style of the point. <pre><code>.PointStyle(default)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#skipnull","title":"SkipNull","text":"<p>If true, null or undefined values will not be used for spacing calculations when determining bar size. <pre><code>.SkipNull(true)\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#stack","title":"Stack","text":"<p>The ID of the group to which this dataset belongs to (when stacked, each group will be a separate stack). <pre><code>.Stack(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#xaxisid","title":"XAxisID","text":"<p>The ID of the x-axis to plot this dataset on. <pre><code>.XAxisID(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/bar/#yaxisid","title":"YAxisID","text":"<p>The ID of the y-axis to plot this dataset on. <pre><code>.YAxisID(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/bubble/","title":"Bubble Chart","text":""},{"location":"chartjs/datasets/bubble/#drawactiveelementsontop","title":"DrawActiveElementsOnTop","text":"<p>Draw the active bubbles of a dataset over the other bubbles of the dataset. Default true <pre><code>.DrawActiveElementsOnTop(true)\n</code></pre></p>"},{"location":"chartjs/datasets/bubble/#hoverradius","title":"HoverRadius","text":"<p>bubble additional radius when hovered (in pixels). Default 4 <pre><code>.HoverRadius(15)\n</code></pre></p>"},{"location":"chartjs/datasets/bubble/#hitradius","title":"HitRadius","text":"<p>bubble additional radius for hit detection (in pixels). Default 1 <pre><code>.HitRadius(15)\n</code></pre></p>"},{"location":"chartjs/datasets/bubble/#order","title":"Order","text":"<p>The drawing order of dataset. Also affects order for tooltip and legend. Default 0 <pre><code>.Order(15)\n</code></pre></p>"},{"location":"chartjs/datasets/bubble/#pointstyle","title":"PointStyle","text":"<p>Set point style. Default 'circle' <pre><code>.PointStyle(default)\n</code></pre></p>"},{"location":"chartjs/datasets/bubble/#pointstyle_1","title":"PointStyle","text":"<p>Is point style enabled? <pre><code>.PointStyle(true)\n</code></pre></p>"},{"location":"chartjs/datasets/bubble/#rotation","title":"Rotation","text":"<p>bubble rotation (in degrees). Default 0 <pre><code>.Rotation(15)\n</code></pre></p>"},{"location":"chartjs/datasets/bubble/#radius","title":"Radius","text":"<p>bubble radius (in pixels). Default 3 <pre><code>.Radius(15)\n</code></pre></p>"},{"location":"chartjs/datasets/doughnut-pie/","title":"Doughnut and Pie Charts","text":""},{"location":"chartjs/datasets/doughnut-pie/#circumference","title":"Circumference","text":"<p>Per-dataset override for the sweep that the arcs cover. <pre><code>.Circumference(15)\n</code></pre></p>"},{"location":"chartjs/datasets/doughnut-pie/#hoveroffset","title":"HoverOffset","text":"<p>arc offset when hovered (in pixels). <pre><code>.HoverOffset(15)\n</code></pre></p>"},{"location":"chartjs/datasets/doughnut-pie/#offset","title":"Offset","text":"<p>arc offset (in pixels). <pre><code>.Offset(15)\n</code></pre></p>"},{"location":"chartjs/datasets/doughnut-pie/#offset_1","title":"Offset","text":"<p>arc offset (in pixels). <pre><code>.Offset(default)\n</code></pre></p>"},{"location":"chartjs/datasets/doughnut-pie/#rotation","title":"Rotation","text":"<p>Per-dataset override for the starting angle to draw arcs from. <pre><code>.Rotation(15)\n</code></pre></p>"},{"location":"chartjs/datasets/doughnut-pie/#spacing","title":"Spacing","text":"<p>Fixed arc offset (in pixels). Similar to offset but applies to all arcs. Default 0 <pre><code>.Spacing(15)\n</code></pre></p>"},{"location":"chartjs/datasets/doughnut-pie/#weight","title":"Weight","text":"<p>The relative thickness of the dataset. Providing a value for weight will cause the pie or doughnut dataset to be drawn with             a thickness relative to the sum of all the dataset weight values. Default 1 <pre><code>.Weight(15)\n</code></pre></p>"},{"location":"chartjs/datasets/line/","title":"Line Chart","text":""},{"location":"chartjs/datasets/line/#cubicinterpolationmode","title":"CubicInterpolationMode","text":"<p>The following interpolation modes are supported, 'default' and 'monotone'. <pre><code>.CubicInterpolationMode(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/line/#drawactiveelementsontop","title":"DrawActiveElementsOnTop","text":"<p>Draw the active points of a dataset over the other points of the dataset. <pre><code>.DrawActiveElementsOnTop(true)\n</code></pre></p>"},{"location":"chartjs/datasets/line/#indexaxis","title":"IndexAxis","text":"<p>The base axis of the dataset. 'x' for horizontal lines and 'y' for vertical lines. <pre><code>.IndexAxis(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/line/#segment","title":"Segment","text":"<p>Line segment styles can be overridden by scriptable options in the segment object. <pre><code>.Segment(default)\n</code></pre></p>"},{"location":"chartjs/datasets/line/#showline","title":"ShowLine","text":"<p>If false, the line is not drawn for this dataset. <pre><code>.ShowLine(true)\n</code></pre></p>"},{"location":"chartjs/datasets/line/#stack","title":"Stack","text":"<p>The ID of the group to which this dataset belongs to (when stacked, each group will be a separate stack). <pre><code>.Stack(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/line/#stepped","title":"Stepped","text":"<p>If the stepped value is set to anything other than false, 'tension' will be ignored. <pre><code>.Stepped(true)\n</code></pre></p>"},{"location":"chartjs/datasets/line/#xaxisid","title":"XAxisID","text":"<p>The ID of the x-axis to plot this dataset on. <pre><code>.XAxisID(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/line/#yaxisid","title":"YAxisID","text":"<p>The ID of the y-axis to plot this dataset on. <pre><code>.YAxisID(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/polar-area/","title":"Polar Area Chart","text":""},{"location":"chartjs/datasets/polar-area/#circular","title":"Circular","text":"<p>By default the Arc is curved. If circular: false the Arc will be flat. <pre><code>.Circular(true)\n</code></pre></p>"},{"location":"chartjs/datasets/radar/","title":"Radar Chart","text":""},{"location":"chartjs/datasets/radar/#data","title":"Data","text":"<p>Sets the data for the Radar Dataset. <pre><code>.Data(default)\n</code></pre></p>"},{"location":"chartjs/datasets/scatter/","title":"Scatter Chart","text":""},{"location":"chartjs/datasets/scatter/#cubicinterpolationmode","title":"CubicInterpolationMode","text":"<p>The following interpolation modes are supported, 'default' and 'monotone'. <pre><code>.CubicInterpolationMode(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/scatter/#drawactiveelementsontop","title":"DrawActiveElementsOnTop","text":"<p>Draw the active points of a dataset over the other points of the dataset. <pre><code>.DrawActiveElementsOnTop(true)\n</code></pre></p>"},{"location":"chartjs/datasets/scatter/#indexaxis","title":"IndexAxis","text":"<p>The base axis of the dataset. 'x' for horizontal lines and 'y' for vertical lines. <pre><code>.IndexAxis(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/scatter/#segment","title":"Segment","text":"<p>Line segment styles can be overridden by scriptable options in the segment object. <pre><code>.Segment(default)\n</code></pre></p>"},{"location":"chartjs/datasets/scatter/#showline","title":"ShowLine","text":"<p>If false, the line is not drawn for this dataset. <pre><code>.ShowLine(true)\n</code></pre></p>"},{"location":"chartjs/datasets/scatter/#stack","title":"Stack","text":"<p>The ID of the group to which this dataset belongs to (when stacked, each group will be a separate stack). <pre><code>.Stack(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/scatter/#stepped","title":"Stepped","text":"<p>If the stepped value is set to anything other than false, 'tension' will be ignored. <pre><code>.Stepped(true)\n</code></pre></p>"},{"location":"chartjs/datasets/scatter/#xaxisid","title":"XAxisID","text":"<p>The ID of the x-axis to plot this dataset on. <pre><code>.XAxisID(\"example\")\n</code></pre></p>"},{"location":"chartjs/datasets/scatter/#yaxisid","title":"YAxisID","text":"<p>The ID of the y-axis to plot this dataset on. <pre><code>.YAxisID(\"example\")\n</code></pre></p>"},{"location":"chartjs/elements/arc/","title":"Arc","text":""},{"location":"chartjs/elements/arc/#angle","title":"Angle","text":"<p>Arc angle to cover (for polar only). Default \"circumference / (arc count)\" <pre><code>.Angle(15)\n</code></pre></p>"},{"location":"chartjs/elements/arc/#borderalign","title":"BorderAlign","text":"<p>Arc stroke alignment. <pre><code>.BorderAlign(default)\n</code></pre></p>"},{"location":"chartjs/elements/arc/#borderdash","title":"BorderDash","text":"<p>Arc line dash. <pre><code>.BorderDash(default)\n</code></pre></p>"},{"location":"chartjs/elements/arc/#borderdashoffset","title":"BorderDashOffset","text":"<p>Arc line dash offset. Default 0.0 <pre><code>.BorderDashOffset(default)\n</code></pre></p>"},{"location":"chartjs/elements/arc/#borderjoinstyle","title":"BorderJoinStyle","text":"<p>Line join style. The default is 'round' when borderAlign is 'inner' <pre><code>.BorderJoinStyle(default)\n</code></pre></p>"},{"location":"chartjs/elements/arc/#circular","title":"Circular","text":"<p>By default the Arc is curved. If circular: false the Arc will be flat. Default true <pre><code>.Circular(true)\n</code></pre></p>"},{"location":"chartjs/elements/bar/","title":"Bar","text":""},{"location":"chartjs/elements/bar/#borderskipped","title":"BorderSkipped","text":"<p>Skipped (excluded) border. <pre><code>.BorderSkipped(true)\n</code></pre></p>"},{"location":"chartjs/elements/bar/#borderskipped_1","title":"BorderSkipped","text":"<p>Skipped (excluded) border. <pre><code>.BorderSkipped(default)\n</code></pre></p>"},{"location":"chartjs/elements/bar/#borderradius","title":"BorderRadius","text":"<p>The bar border radius (in pixels). Default 0 <pre><code>.BorderRadius(15)\n</code></pre></p>"},{"location":"chartjs/elements/bar/#borderradius_1","title":"BorderRadius","text":"<p>The bar border radius (in pixels). <pre><code>.BorderRadius(15, 15, 15, 15)\n</code></pre></p>"},{"location":"chartjs/elements/bar/#inflateamount","title":"InflateAmount","text":"<p>The amount of pixels to inflate the bar rectangle(s) when drawing is 'auto'. <pre><code>.InflateAmount()\n</code></pre></p>"},{"location":"chartjs/elements/bar/#inflateamount_1","title":"InflateAmount","text":"<p>The amount of pixels to inflate the bar rectangle(s) when drawing. <pre><code>.InflateAmount(15)\n</code></pre></p>"},{"location":"chartjs/elements/bar/#pointstyle","title":"PointStyle","text":"<p>Style of the point for legend. <pre><code>.PointStyle(default)\n</code></pre></p>"},{"location":"chartjs/elements/line/","title":"Line","text":""},{"location":"chartjs/elements/line/#tension","title":"Tension","text":"<p>B\u00e9zier curve tension (0 for no B\u00e9zier curves). <pre><code>.Tension(default)\n</code></pre></p>"},{"location":"chartjs/elements/line/#bordercapstyle","title":"BorderCapStyle","text":"<p>Line cap style. Default 'butt' <pre><code>.BorderCapStyle(default)\n</code></pre></p>"},{"location":"chartjs/elements/line/#borderdash","title":"BorderDash","text":"<p>Line dash. <pre><code>.BorderDash(default)\n</code></pre></p>"},{"location":"chartjs/elements/line/#borderdashoffset","title":"BorderDashOffset","text":"<p>Line dash offset. Default 0.0 <pre><code>.BorderDashOffset(default)\n</code></pre></p>"},{"location":"chartjs/elements/line/#borderjoinstyle","title":"BorderJoinStyle","text":"<p>Line join style. Default 'miter' <pre><code>.BorderJoinStyle(default)\n</code></pre></p>"},{"location":"chartjs/elements/line/#capbezierpoints","title":"CapBezierPoints","text":"<p>true to keep B\u00e9zier control inside the chart, false for no restriction. Default true <pre><code>.CapBezierPoints(true)\n</code></pre></p>"},{"location":"chartjs/elements/line/#cubicinterpolationmode","title":"CubicInterpolationMode","text":"<p>Interpolation mode to apply. Default 'default' <pre><code>.CubicInterpolationMode(\"example\")\n</code></pre></p>"},{"location":"chartjs/elements/line/#fill","title":"Fill","text":"<p>How to fill the area under the line. Default false <pre><code>.Fill(true)\n</code></pre></p>"},{"location":"chartjs/elements/line/#fill_1","title":"Fill","text":"<p>How to fill the area under the line. <pre><code>.Fill(\"example\")\n</code></pre></p>"},{"location":"chartjs/elements/line/#stepped","title":"Stepped","text":"<p>true to show the line as a stepped line (tension will be ignored). Default false <pre><code>.Stepped(true)\n</code></pre></p>"},{"location":"chartjs/elements/point/","title":"Point","text":""},{"location":"chartjs/elements/point/#radius","title":"Radius","text":"<p>Point radius. <pre><code>.Radius(15)\n</code></pre></p>"},{"location":"chartjs/elements/point/#pointstyle","title":"PointStyle","text":"<p>Is point style enabled. <pre><code>.PointStyle(true)\n</code></pre></p>"},{"location":"chartjs/elements/point/#pointstyle_1","title":"PointStyle","text":"<p>Point style. <pre><code>.PointStyle(default)\n</code></pre></p>"},{"location":"chartjs/elements/point/#rotation","title":"Rotation","text":"<p>Point rotation (in degrees). Default 0 <pre><code>.Rotation(15)\n</code></pre></p>"},{"location":"chartjs/elements/point/#hitradius","title":"HitRadius","text":"<p>Extra radius added to point radius for hit detection. Default 1 <pre><code>.HitRadius(15)\n</code></pre></p>"},{"location":"chartjs/elements/point/#hoverradius","title":"HoverRadius","text":"<p>Point radius when hovered.. Default 4 <pre><code>.HoverRadius(15)\n</code></pre></p>"},{"location":"chartjs/elements/point/#hoverborderwidth","title":"HoverBorderWidth","text":"<p>Stroke width when hovered. Default 1 <pre><code>.HoverBorderWidth(15)\n</code></pre></p>"},{"location":"chartjs/plugins/collors/","title":"Collors","text":""},{"location":"chartjs/plugins/collors/#enabled","title":"Enabled","text":"<p>If you don't have any preference for colors, you can use the built-in Colors plugin.             It will cycle through a palette of seven Chart.js brand colors. Default true <pre><code>.Enabled(true)\n</code></pre></p>"},{"location":"chartjs/plugins/collors/#forceoverride","title":"ForceOverride","text":"<p>By default, the colors plugin only works when you initialize the chart without any colors for the border or background specified.             If you want to force the colors plugin to always color your datasets, for example,             when using dynamic datasets at runtime you will need to set the forceOverride option to true. <pre><code>.ForceOverride(true)\n</code></pre></p>"},{"location":"chartjs/plugins/decimation/","title":"Decimation","text":""},{"location":"chartjs/plugins/decimation/#enabled","title":"Enabled","text":"<p>Is decimation enabled? <pre><code>.Enabled(true)\n</code></pre></p>"},{"location":"chartjs/plugins/decimation/#algorithm","title":"Algorithm","text":"<pre><code>.Algorithm(default)\n</code></pre>"},{"location":"chartjs/plugins/decimation/#samples","title":"Samples","text":"<p>If the 'lttb' algorithm is used, this is the number of samples in the output dataset.              Defaults to the canvas width to pick 1 sample per pixel. <pre><code>.Samples(15)\n</code></pre></p>"},{"location":"chartjs/plugins/decimation/#threshold","title":"Threshold","text":"<p>If the number of samples in the current axis range is above this value, the decimation will be triggered.              Defaults to 4 times the canvas width.             The number of point after decimation can be higher than the threshold value. <pre><code>.Threshold(15)\n</code></pre></p>"},{"location":"chartjs/plugins/filler/","title":"Filler","text":""},{"location":"chartjs/plugins/filler/#propagate","title":"Propagate","text":"<p>Fill propagation when target is hidden. <pre><code>.Propagate(true)\n</code></pre></p>"},{"location":"chartjs/plugins/filler/#drawtime","title":"DrawTime","text":"<pre><code>.DrawTime(default)\n</code></pre>"},{"location":"chartjs/plugins/legend-labels/","title":"Labels","text":""},{"location":"chartjs/plugins/legend-labels/#boxwidth","title":"BoxWidth","text":"<p>Width of coloured box. default 40 <pre><code>.BoxWidth(15)\n</code></pre></p>"},{"location":"chartjs/plugins/legend-labels/#boxheight","title":"BoxHeight","text":"<p>Height of the coloured box. <pre><code>.BoxHeight(15)\n</code></pre></p>"},{"location":"chartjs/plugins/legend-labels/#color","title":"Color","text":"<p>Color of label and the strikethrough. <pre><code>.Color(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/legend-labels/#font","title":"Font","text":"<pre><code>.Font(default)\n</code></pre>"},{"location":"chartjs/plugins/legend-labels/#padding","title":"Padding","text":"<p>Padding between rows of colored boxes. Default 10 <pre><code>.Padding(15)\n</code></pre></p>"},{"location":"chartjs/plugins/legend-labels/#generatelabels","title":"GenerateLabels","text":"<p>Generates legend items for each thing in the legend.             Default implementation returns the text + styling for the color box. <pre><code>.GenerateLabels(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/legend-labels/#filter","title":"Filter","text":"<p>Filters legend items out of the legend. Receives 2 parameters, a Legend Item and the chart data. <pre><code>.Filter(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/legend-labels/#sort","title":"Sort","text":"<p>Sorts legend items. Type is : sort(a: LegendItem, b: LegendItem, data: ChartData): number;.             Receives 3 parameters, two Legend Items and the chart data.              The return value of the function is a number that indicates the order of the two legend item parameters.              The ordering matches the return value of Array.prototype.sort() <pre><code>.Sort(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/legend-labels/#pointstyle","title":"PointStyle","text":"<p>If specified, this style of point is used for the legend. Only used if usePointStyle is true. default 'circle' <pre><code>.PointStyle(default)\n</code></pre></p>"},{"location":"chartjs/plugins/legend-labels/#textalign","title":"TextAlign","text":"<p>Horizontal alignment of the label text. Options are: 'left', 'right' or 'center'. default 'center' <pre><code>.TextAlign(default)\n</code></pre></p>"},{"location":"chartjs/plugins/legend-labels/#usepointstyle","title":"UsePointStyle","text":"<p>Label style will match corresponding point style (size is based on pointStyleWidth or the minimum value between boxWidth and font.size).             default false <pre><code>.UsePointStyle(true)\n</code></pre></p>"},{"location":"chartjs/plugins/legend-labels/#pointstylewidth","title":"PointStyleWidth","text":"<p>If UsePointStyle is true, the width of the point style used for the legend. <pre><code>.PointStyleWidth(15)\n</code></pre></p>"},{"location":"chartjs/plugins/legend-labels/#useborderradius","title":"UseBorderRadius","text":"<p>Label borderRadius will match corresponding borderRadius. default false <pre><code>.UseBorderRadius(true)\n</code></pre></p>"},{"location":"chartjs/plugins/legend-labels/#borderradius","title":"BorderRadius","text":"<p>Override the borderRadius to use. <pre><code>.BorderRadius(default)\n</code></pre></p>"},{"location":"chartjs/plugins/legend-title/","title":"Title","text":""},{"location":"chartjs/plugins/legend-title/#color","title":"Color","text":"<p>Color of text. <pre><code>.Color(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/legend-title/#display","title":"Display","text":"<p>Is the legend title displayed. <pre><code>.Display(true)\n</code></pre></p>"},{"location":"chartjs/plugins/legend-title/#font","title":"Font","text":"<pre><code>.Font(default)\n</code></pre>"},{"location":"chartjs/plugins/legend-title/#padding","title":"Padding","text":"<p>Padding around the title. <pre><code>.Padding(15)\n</code></pre></p>"},{"location":"chartjs/plugins/legend-title/#padding_1","title":"Padding","text":"<pre><code>.Padding(default)\n</code></pre>"},{"location":"chartjs/plugins/legend-title/#text","title":"Text","text":"<p>The string title. <pre><code>.Text(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/legend/","title":"Legend","text":""},{"location":"chartjs/plugins/legend/#display","title":"Display","text":"<p>Is the legend shown? default true. <pre><code>.Display(true)\n</code></pre></p>"},{"location":"chartjs/plugins/legend/#position","title":"Position","text":"<p>Position of the legend. <pre><code>.Position(default)\n</code></pre></p>"},{"location":"chartjs/plugins/legend/#align","title":"Align","text":"<p>Alignment of the legend. <pre><code>.Align(default)\n</code></pre></p>"},{"location":"chartjs/plugins/legend/#maxheight","title":"MaxHeight","text":"<p>Maximum height of the legend, in pixels. <pre><code>.MaxHeight(15)\n</code></pre></p>"},{"location":"chartjs/plugins/legend/#maxwidth","title":"MaxWidth","text":"<p>Maximum width of the legend, in pixels. <pre><code>.MaxWidth(15)\n</code></pre></p>"},{"location":"chartjs/plugins/legend/#fullsize","title":"FullSize","text":"<p>Marks that this box should take the full width/height of the canvas (moving other boxes).              This is unlikely to need to be changed in day-to-day use. default true. <pre><code>.FullSize(true)\n</code></pre></p>"},{"location":"chartjs/plugins/legend/#onclick","title":"OnClick","text":"<p>A callback that is called when a click event is registered on a label item.             Arguments: [event, legendItem, legend]. <pre><code>.OnClick(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/legend/#onhover","title":"OnHover","text":"<p>A callback that is called when a 'mousemove' event is registered on top of a label item.             Arguments: [event, legendItem, legend]. <pre><code>.OnHover(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/legend/#onleave","title":"OnLeave","text":"<p>A callback that is called when a 'mousemove' event is registered outside of a previously hovered label item.              Arguments: [event, legendItem, legend]. <pre><code>.OnLeave(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/legend/#reverse","title":"Reverse","text":"<p>Legend will show datasets in reverse order. default false. <pre><code>.Reverse(true)\n</code></pre></p>"},{"location":"chartjs/plugins/legend/#labels","title":"Labels","text":"<pre><code>.Labels(default)\n</code></pre>"},{"location":"chartjs/plugins/legend/#rtl","title":"Rtl","text":"<p>'true' for rendering the legends from right to left. <pre><code>.Rtl(true)\n</code></pre></p>"},{"location":"chartjs/plugins/legend/#textdirection","title":"TextDirection","text":"<p>This will force the text direction 'rtl' or 'ltr' on the canvas for rendering the legend,             regardless of the css specified on the canvas. <pre><code>.TextDirection(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/legend/#title","title":"Title","text":"<pre><code>.Title(default)\n</code></pre>"},{"location":"chartjs/plugins/subtitle/","title":"Subtitle","text":""},{"location":"chartjs/plugins/subtitle/#align","title":"Align","text":"<p>Alignment of the title. default 'center' <pre><code>.Align(default)\n</code></pre></p>"},{"location":"chartjs/plugins/subtitle/#color","title":"Color","text":"<p>Color of text. <pre><code>.Color(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/subtitle/#display","title":"Display","text":"<p>Is the title shown? default 'false' <pre><code>.Display(true)\n</code></pre></p>"},{"location":"chartjs/plugins/subtitle/#fullsize","title":"FullSize","text":"<p>Marks that this box should take the full width/height of the canvas.              If false, the box is sized and placed above/beside the chart area.             default 'false'. <pre><code>.FullSize(true)\n</code></pre></p>"},{"location":"chartjs/plugins/subtitle/#position","title":"Position","text":"<p>Position of title. default 'top' <pre><code>.Position(default)\n</code></pre></p>"},{"location":"chartjs/plugins/subtitle/#font","title":"Font","text":"<pre><code>.Font(default)\n</code></pre>"},{"location":"chartjs/plugins/subtitle/#padding","title":"Padding","text":"<p>Padding around the title. <pre><code>.Padding(15)\n</code></pre></p>"},{"location":"chartjs/plugins/subtitle/#padding_1","title":"Padding","text":"<pre><code>.Padding(default)\n</code></pre>"},{"location":"chartjs/plugins/subtitle/#text","title":"Text","text":"<p>The string title. <pre><code>.Text(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/subtitle/#text_1","title":"Text","text":"<p>The string title(s). <pre><code>.Text(default)\n</code></pre></p>"},{"location":"chartjs/plugins/title/","title":"Title","text":""},{"location":"chartjs/plugins/title/#align","title":"Align","text":"<p>Alignment of the title. default 'center' <pre><code>.Align(default)\n</code></pre></p>"},{"location":"chartjs/plugins/title/#color","title":"Color","text":"<p>Color of text. <pre><code>.Color(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/title/#display","title":"Display","text":"<p>Is the title shown? default 'false' <pre><code>.Display(true)\n</code></pre></p>"},{"location":"chartjs/plugins/title/#fullsize","title":"FullSize","text":"<p>Marks that this box should take the full width/height of the canvas.              If false, the box is sized and placed above/beside the chart area.             default 'false'. <pre><code>.FullSize(true)\n</code></pre></p>"},{"location":"chartjs/plugins/title/#position","title":"Position","text":"<p>Position of title. default 'top' <pre><code>.Position(default)\n</code></pre></p>"},{"location":"chartjs/plugins/title/#font","title":"Font","text":"<pre><code>.Font(default)\n</code></pre>"},{"location":"chartjs/plugins/title/#padding","title":"Padding","text":"<p>Padding around the title. <pre><code>.Padding(15)\n</code></pre></p>"},{"location":"chartjs/plugins/title/#padding_1","title":"Padding","text":"<pre><code>.Padding(default)\n</code></pre>"},{"location":"chartjs/plugins/title/#text","title":"Text","text":"<p>The string title. <pre><code>.Text(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/title/#text_1","title":"Text","text":"<p>The string title(s). <pre><code>.Text(default)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/","title":"Callbacks","text":""},{"location":"chartjs/plugins/tooltip-callbacks/#beforetitle","title":"BeforeTitle","text":"<p>Returns the text to render before the title. <pre><code>.BeforeTitle(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/#title","title":"Title","text":"<p>Returns text to render as the title of the tooltip. <pre><code>.Title(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/#aftertitle","title":"AfterTitle","text":"<p>Returns text to render after the title. <pre><code>.AfterTitle(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/#beforebody","title":"BeforeBody","text":"<p>Returns text to render before the body section. <pre><code>.BeforeBody(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/#beforelabel","title":"BeforeLabel","text":"<p>Returns text to render before an individual label. This will be called for each item in the tooltip. <pre><code>.BeforeLabel(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/#label","title":"Label","text":"<p>Returns text to render for an individual item in the tooltip. <pre><code>.Label(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/#labelcolor","title":"LabelColor","text":"<p>Returns the colors to render for the tooltip item. <pre><code>.LabelColor(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/#labeltextcolor","title":"LabelTextColor","text":"<p>Returns the colors for the text of the label for the tooltip item. <pre><code>.LabelTextColor(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/#labelpointstyle","title":"LabelPointStyle","text":"<p>Returns the point style to use instead of color boxes if usePointStyle is true (object with values pointStyle and rotation).             Default implementation uses the point style from the dataset points. <pre><code>.LabelPointStyle(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/#afterlabel","title":"AfterLabel","text":"<p>Returns text to render after an individual label. <pre><code>.AfterLabel(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/#afterbody","title":"AfterBody","text":"<p>Returns text to render after the body section. <pre><code>.AfterBody(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/#beforefooter","title":"BeforeFooter","text":"<p>Returns text to render before the footer section. <pre><code>.BeforeFooter(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/#footer","title":"Footer","text":"<p>Returns text to render as the footer of the tooltip. <pre><code>.Footer(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip-callbacks/#afterfooter","title":"AfterFooter","text":"<p>Text to render after the footer section. <pre><code>.AfterFooter(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/","title":"Tooltip","text":""},{"location":"chartjs/plugins/tooltip/#enabled","title":"Enabled","text":"<p>Are on-canvas tooltips enabled? default true <pre><code>.Enabled(true)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#external","title":"External","text":"<p>External function name. <pre><code>.External(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#mode","title":"Mode","text":"<p>Sets which elements appear in the tooltip. <pre><code>.Mode(default)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#mode_1","title":"Mode","text":"<p>Sets which elements appear in the tooltip. 'Custom mode' <pre><code>.Mode(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#intersect","title":"Intersect","text":"<p>If true, the tooltip mode applies only when the mouse position intersects with an element.              If false, the mode will be applied at all times. <pre><code>.Intersect(true)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#position","title":"Position","text":"<p>The mode for positioning the tooltip. default 'average' <pre><code>.Position(default)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#position_1","title":"Position","text":"<p>The mode for positioning the tooltip. 'Custom position' <pre><code>.Position(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#callbacks","title":"Callbacks","text":"<pre><code>.Callbacks(default)\n</code></pre>"},{"location":"chartjs/plugins/tooltip/#itemsort","title":"ItemSort","text":"<p>Sort tooltip items. <pre><code>.ItemSort(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#filter","title":"Filter","text":"<p>Filter tooltip items. <pre><code>.Filter(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#backgroundcolor","title":"BackgroundColor","text":"<p>Background color of the tooltip. <pre><code>.BackgroundColor(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#titlecolor","title":"TitleColor","text":"<p>Color of title text. default '#fff' <pre><code>.TitleColor(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#titlefont","title":"TitleFont","text":"<pre><code>.TitleFont(default)\n</code></pre>"},{"location":"chartjs/plugins/tooltip/#titlealign","title":"TitleAlign","text":"<p>Horizontal alignment of the title text lines. default 'left' <pre><code>.TitleAlign(default)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#titlespacing","title":"TitleSpacing","text":"<p>Spacing to add to top and bottom of each title line. default 2 <pre><code>.TitleSpacing(15)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#titlemarginbottom","title":"TitleMarginBottom","text":"<p>Margin to add on bottom of title section. default 6 <pre><code>.TitleMarginBottom(15)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#bodycolor","title":"BodyColor","text":"<p>Color of body text. defautl '#fff' <pre><code>.BodyColor(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#bodyfont","title":"BodyFont","text":"<pre><code>.BodyFont(default)\n</code></pre>"},{"location":"chartjs/plugins/tooltip/#bodyalign","title":"BodyAlign","text":"<p>Horizontal alignment of the body text lines. default 'left' <pre><code>.BodyAlign(default)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#bodyspacing","title":"BodySpacing","text":"<p>Spacing to add to top and bottom of each tooltip item. default 2 <pre><code>.BodySpacing(15)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#footercolor","title":"FooterColor","text":"<p>Color of footer text. default '#fff' <pre><code>.FooterColor(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#footerfont","title":"FooterFont","text":"<pre><code>.FooterFont(default)\n</code></pre>"},{"location":"chartjs/plugins/tooltip/#footeralign","title":"FooterAlign","text":"<p>Horizontal alignment of the footer text lines. defautl 'left' <pre><code>.FooterAlign(default)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#footerspacing","title":"FooterSpacing","text":"<p>Spacing to add to top and bottom of each footer line. default 2 <pre><code>.FooterSpacing(15)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#footermargintop","title":"FooterMarginTop","text":"<p>Margin to add before drawing the footer. default 6 <pre><code>.FooterMarginTop(15)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#padding","title":"Padding","text":"<p>Padding inside the tooltip. default 6 <pre><code>.Padding(15)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#padding_1","title":"Padding","text":"<pre><code>.Padding(default)\n</code></pre>"},{"location":"chartjs/plugins/tooltip/#caretpadding","title":"CaretPadding","text":"<p>Extra distance to move the end of the tooltip arrow away from the tooltip point. default 2 <pre><code>.CaretPadding(15)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#caretsize","title":"CaretSize","text":"<p>Size, in px, of the tooltip arrow. default 5 <pre><code>.CaretSize(15)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#cornerradius","title":"CornerRadius","text":"<p>Radius of tooltip corner curves. default 6 <pre><code>.CornerRadius(15)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#multikeybackground","title":"MultiKeyBackground","text":"<p>Color to draw behind the colored boxes when multiple items are in the tooltip. default '#fff' <pre><code>.MultiKeyBackground(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#displaycolors","title":"DisplayColors","text":"<p>If true, color boxes are shown in the tooltip. default true <pre><code>.DisplayColors(true)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#boxwidth","title":"BoxWidth","text":"<p>Width of the color box if displayColors is true. <pre><code>.BoxWidth(15)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#boxheight","title":"BoxHeight","text":"<p>Height of the color box if displayColors is true. <pre><code>.BoxHeight(15)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#boxpadding","title":"BoxPadding","text":"<p>Padding between the color box and the text. default 1 <pre><code>.BoxPadding(15)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#usepointstyle","title":"UsePointStyle","text":"<p>Use the corresponding point style (from dataset options) instead of color boxes, ex: star, triangle etc.             (size is based on the minimum value between boxWidth and boxHeight). default false <pre><code>.UsePointStyle(true)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#bordercolor","title":"BorderColor","text":"<p>Color of the border. <pre><code>.BorderColor(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#borderwidth","title":"BorderWidth","text":"<p>Size of the border. default 0 <pre><code>.BorderWidth(15)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#rtl","title":"Rtl","text":"<p>true for rendering the tooltip from right to left. <pre><code>.Rtl(true)\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#textdirection","title":"TextDirection","text":"<p>This will force the text direction 'rtl' or 'ltr' on the canvas for rendering the tooltips,              regardless of the css specified on the canvas. <pre><code>.TextDirection(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#xalign","title":"XAlign","text":"<p>Position of the tooltip caret in the X direction. <pre><code>.XAlign(\"example\")\n</code></pre></p>"},{"location":"chartjs/plugins/tooltip/#yalign","title":"YAlign","text":"<p>Position of the tooltip caret in the Y direction. <pre><code>.YAlign(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/border/","title":"Border","text":""},{"location":"chartjs/scales/border/#display","title":"Display","text":"<p>If true, draw a border at the edge between the axis and the chart area.             Default true <pre><code>.Display(true)\n</code></pre></p>"},{"location":"chartjs/scales/border/#color","title":"Color","text":"<p>The color of the border line. <pre><code>.Color(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/border/#width","title":"Width","text":"<p>The width of the border line. Default 1 <pre><code>.Width(15)\n</code></pre></p>"},{"location":"chartjs/scales/border/#dash","title":"Dash","text":"<p>Length and spacing of dashes on grid lines. Default [] <pre><code>.Dash(default)\n</code></pre></p>"},{"location":"chartjs/scales/border/#dashoffset","title":"DashOffset","text":"<p>Offset for line dashes. Default 0.0 <pre><code>.DashOffset(default)\n</code></pre></p>"},{"location":"chartjs/scales/border/#z","title":"Z","text":"<p>z-index of the border layer. Values less than equal 0 are drawn under datasets, grater than 0 on top.             Default 0 <pre><code>.Z(15)\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/","title":"Callbacks","text":""},{"location":"chartjs/scales/callbacks/#beforeupdate","title":"BeforeUpdate","text":"<p>Callback called before the update process starts. <pre><code>.BeforeUpdate(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/#afterupdate","title":"AfterUpdate","text":"<p>Callback that runs at the end of the update process. <pre><code>.AfterUpdate(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/#beforesetdimensions","title":"BeforeSetDimensions","text":"<p>Callback that runs before dimensions are set. <pre><code>.BeforeSetDimensions(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/#aftersetdimensions","title":"AfterSetDimensions","text":"<p>Callback that runs after dimensions are set. <pre><code>.AfterSetDimensions(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/#beforedatalimits","title":"BeforeDataLimits","text":"<p>Callback that runs before data limits are determined. <pre><code>.BeforeDataLimits(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/#afterdatalimits","title":"AfterDataLimits","text":"<p>Callback that runs after data limits are determined. <pre><code>.AfterDataLimits(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/#beforebuildticks","title":"BeforeBuildTicks","text":"<p>Callback that runs before ticks are created. <pre><code>.BeforeBuildTicks(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/#afterbuildticks","title":"AfterBuildTicks","text":"<p>Callback that runs after ticks are created. Useful for filtering ticks. <pre><code>.AfterBuildTicks(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/#beforeticktolabelconversion","title":"BeforeTickToLabelConversion","text":"<p>Callback that runs before ticks are converted into strings. <pre><code>.BeforeTickToLabelConversion(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/#afterticktolabelconversion","title":"AfterTickToLabelConversion","text":"<p>Callback that runs after ticks are converted into strings. <pre><code>.AfterTickToLabelConversion(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/#beforecalculatelabelrotation","title":"BeforeCalculateLabelRotation","text":"<p>Callback that runs before tick rotation is determined. <pre><code>.BeforeCalculateLabelRotation(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/#aftercalculatelabelrotation","title":"AfterCalculateLabelRotation","text":"<p>Callback that runs after tick rotation is determined. <pre><code>.AfterCalculateLabelRotation(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/#beforefit","title":"BeforeFit","text":"<p>Callback that runs before the scale fits to the canvas. <pre><code>.BeforeFit(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/callbacks/#afterfit","title":"AfterFit","text":"<p>Callback that runs after the scale fits to the canvas. <pre><code>.AfterFit(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/grid/","title":"Grid","text":""},{"location":"chartjs/scales/grid/#circular","title":"Circular","text":"<p>If true, gridlines are circular (on radar and polar area charts only). Default false <pre><code>.Circular(true)\n</code></pre></p>"},{"location":"chartjs/scales/grid/#color","title":"Color","text":"<p>The color of the grid lines. If specified as an array, the first color applies to the first grid line,             the second to the second grid line, and so on. <pre><code>.Color(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/grid/#display","title":"Display","text":"<p>If false, do not display grid lines for this axis. Default true <pre><code>.Display(true)\n</code></pre></p>"},{"location":"chartjs/scales/grid/#drawonchartarea","title":"DrawOnChartArea","text":"<p>If true, draw lines on the chart area inside the axis lines.              This is useful when there are multiple axes and you need to control which grid lines are drawn.             Default true <pre><code>.DrawOnChartArea(true)\n</code></pre></p>"},{"location":"chartjs/scales/grid/#drawticks","title":"DrawTicks","text":"<p>If true, draw lines beside the ticks in the axis area beside the chart. Default true <pre><code>.DrawTicks(true)\n</code></pre></p>"},{"location":"chartjs/scales/grid/#linewidth","title":"LineWidth","text":"<p>Stroke width of grid lines. Default 1 <pre><code>.LineWidth(15)\n</code></pre></p>"},{"location":"chartjs/scales/grid/#offset","title":"Offset","text":"<p>If true, grid lines will be shifted to be between labels. This is set to true for a bar chart by default.             Default false <pre><code>.Offset(true)\n</code></pre></p>"},{"location":"chartjs/scales/grid/#tickborderdash","title":"TickBorderDash","text":"<p>Length and spacing of the tick mark line. If not set, defaults to the grid line borderDash value.             Default [] <pre><code>.TickBorderDash(default)\n</code></pre></p>"},{"location":"chartjs/scales/grid/#tickborderdashoffset","title":"TickBorderDashOffset","text":"<p>Offset for the line dash of the tick mark. If unset, defaults to the grid line 'borderDashOffset' value. <pre><code>.TickBorderDashOffset(15)\n</code></pre></p>"},{"location":"chartjs/scales/grid/#tickcolor","title":"TickColor","text":"<p>Color of the tick line. If unset, defaults to the grid line color. <pre><code>.TickColor(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/grid/#ticklength","title":"TickLength","text":"<p>Length in pixels that the grid lines will draw into the axis area. Default 8 <pre><code>.TickLength(15)\n</code></pre></p>"},{"location":"chartjs/scales/grid/#tickwidth","title":"TickWidth","text":"<p>Width of the tick mark in pixels. If unset, defaults to the grid line width. <pre><code>.TickWidth(15)\n</code></pre></p>"},{"location":"chartjs/scales/grid/#z","title":"Z","text":"<p>z-index of the gridline layer. Values less than equal are drawn under datasets, grater than 0 on top.             Default -1 <pre><code>.Z(15)\n</code></pre></p>"},{"location":"chartjs/scales/scales/","title":"Scales","text":""},{"location":"chartjs/scales/scales/#type","title":"Type","text":"<p>Type of scale being employed. Custom scales can be created and registered with a string key.              This allows changing the type of an axis for a chart. <pre><code>.Type(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/scales/#aligntopixels","title":"AlignToPixels","text":"<p>Align pixel values to device pixels. Default false <pre><code>.AlignToPixels(true)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#backgroundcolor","title":"BackgroundColor","text":"<p>Background color of the scale area. <pre><code>.BackgroundColor(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/scales/#border","title":"Border","text":"<pre><code>.Border(default)\n</code></pre>"},{"location":"chartjs/scales/scales/#display","title":"Display","text":"<p>Controls the axis global visibility (visible when true, hidden when false).             Default true <pre><code>.Display(true)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#display_1","title":"Display","text":"<p>When display: 'auto', the axis is visible only if at least one associated dataset is visible. <pre><code>.Display(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/scales/#grid","title":"Grid","text":"<pre><code>.Grid(default)\n</code></pre>"},{"location":"chartjs/scales/scales/#min","title":"Min","text":"<p>User defined minimum number for the scale, overrides minimum value from data. <pre><code>.Min(15)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#max","title":"Max","text":"<p>User defined maximum number for the scale, overrides maximum value from data. <pre><code>.Max(15)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#reverse","title":"Reverse","text":"<p>Reverse the scale. Default false <pre><code>.Reverse(true)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#stacked","title":"Stacked","text":"<p>Should the data be stacked. <pre><code>.Stacked(true)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#stacked_1","title":"Stacked","text":"<p>For some charts, you might want to stack positive and negative values together.              That can be achieved by specifying stacked: 'single'. <pre><code>.Stacked(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/scales/#suggestedmax","title":"SuggestedMax","text":"<p>Adjustment used when calculating the maximum data value. <pre><code>.SuggestedMax(15)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#suggestedmin","title":"SuggestedMin","text":"<p>Adjustment used when calculating the minimum data value. <pre><code>.SuggestedMin(15)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#ticks","title":"Ticks","text":"<pre><code>.Ticks(default)\n</code></pre>"},{"location":"chartjs/scales/scales/#weight","title":"Weight","text":"<p>The weight used to sort the axis. Higher weights are further away from the chart area.             Default 0 <pre><code>.Weight(15)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#callbacks","title":"Callbacks","text":"<pre><code>.Callbacks(default)\n</code></pre>"},{"location":"chartjs/scales/scales/#beginatzero","title":"BeginAtZero","text":"<p>if true, scale will include 0 if it is not already included. <pre><code>.BeginAtZero(true)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#grace","title":"Grace","text":"<p>Percentage (string ending with %) for added room in the scale range above and below data. <pre><code>.Grace(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/scales/#grace_1","title":"Grace","text":"<p>Amount (number) for added room in the scale range above and below data. <pre><code>.Grace(15)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#bounds","title":"Bounds","text":"<p>Determines the scale bounds. Default 'ticks' <pre><code>.Bounds(default)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#clip","title":"Clip","text":"<p>If true, clip the dataset drawing against the size of the scale instead of chart area.             Default true <pre><code>.Clip(true)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#position","title":"Position","text":"<p>Position of the axis. <pre><code>.Position(default)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#stack","title":"Stack","text":"<p>Stack group. Axes at the same position with same stack are stacked. <pre><code>.Stack(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/scales/#stackweight","title":"StackWeight","text":"<p>Weight of the scale in stack group. Used to determine the amount of allocated space for the scale within the group.             Default 1 <pre><code>.StackWeight(15)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#axis","title":"Axis","text":"<p>Which type of axis this is. Possible values are: 'x', 'y'.              If not set, this is inferred from the first character of the ID which should be 'x' or 'y'. <pre><code>.Axis(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/scales/#offset","title":"Offset","text":"<p>If true, extra space is added to the both edges and the axis is scaled to fit into the chart area.             This is set to true for a bar chart by default, for others false. <pre><code>.Offset(true)\n</code></pre></p>"},{"location":"chartjs/scales/scales/#title","title":"Title","text":"<pre><code>.Title(default)\n</code></pre>"},{"location":"chartjs/scales/ticks/","title":"Ticks","text":""},{"location":"chartjs/scales/ticks/#backdropcolor","title":"BackdropColor","text":"<p>Color of label backdrops. <pre><code>.BackdropColor(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/ticks/#backdroppadding","title":"BackdropPadding","text":"<p>Padding of label backdrop. Default 2 <pre><code>.BackdropPadding(15)\n</code></pre></p>"},{"location":"chartjs/scales/ticks/#backdroppadding_1","title":"BackdropPadding","text":"<pre><code>.BackdropPadding(default)\n</code></pre>"},{"location":"chartjs/scales/ticks/#callback","title":"Callback","text":"<p>Returns the string representation of the tick value as it should be displayed on the chart. <pre><code>.Callback(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/ticks/#display","title":"Display","text":"<p>If true, show tick labels. Default true <pre><code>.Display(true)\n</code></pre></p>"},{"location":"chartjs/scales/ticks/#color","title":"Color","text":"<p>Color of ticks. <pre><code>.Color(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/ticks/#font","title":"Font","text":"<pre><code>.Font(default)\n</code></pre>"},{"location":"chartjs/scales/ticks/#major","title":"Major","text":"<p>If true, major ticks are generated.              A major tick will affect autoskipping and major will be defined on ticks in the scriptable options context.             Default false <pre><code>.Major(true)\n</code></pre></p>"},{"location":"chartjs/scales/ticks/#padding","title":"Padding","text":"<p>Sets the offset of the tick labels from the axis. Default 3 <pre><code>.Padding(15)\n</code></pre></p>"},{"location":"chartjs/scales/ticks/#showlabelbackdrop","title":"ShowLabelBackdrop","text":"<p>If true, draw a background behind the tick labels.             Default is true for radial scale, false otherwise. <pre><code>.ShowLabelBackdrop(true)\n</code></pre></p>"},{"location":"chartjs/scales/ticks/#textstrokecolor","title":"TextStrokeColor","text":"<p>The color of the stroke around the text. <pre><code>.TextStrokeColor(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/ticks/#textstrokewidth","title":"TextStrokeWidth","text":"<p>Stroke width around the text. Default 0 <pre><code>.TextStrokeWidth(15)\n</code></pre></p>"},{"location":"chartjs/scales/ticks/#z","title":"Z","text":"<p>z-index of tick layer. Useful when ticks are drawn on chart area.              Values less than equal 0 are drawn under datasets, grater than 0 on top <pre><code>.Z(15)\n</code></pre></p>"},{"location":"chartjs/scales/title/","title":"Title","text":""},{"location":"chartjs/scales/title/#display","title":"Display","text":"<p>If true, display the axis title. Default false <pre><code>.Display(true)\n</code></pre></p>"},{"location":"chartjs/scales/title/#align","title":"Align","text":"<p>Alignment of the axis title. Possible options are 'start', 'center' and 'end'.             Default 'center' <pre><code>.Align(default)\n</code></pre></p>"},{"location":"chartjs/scales/title/#text","title":"Text","text":"<p>The text for the title. (i.e. \"# of People\" or \"Response Choices\"). <pre><code>.Text(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/title/#text_1","title":"Text","text":"<p>The text for the title(s). <pre><code>.Text(default)\n</code></pre></p>"},{"location":"chartjs/scales/title/#color","title":"Color","text":"<p>Color of label. <pre><code>.Color(\"example\")\n</code></pre></p>"},{"location":"chartjs/scales/title/#font","title":"Font","text":"<pre><code>.Font(default)\n</code></pre>"},{"location":"chartjs/scales/title/#padding","title":"Padding","text":"<p>Padding to apply around scale labels. Only top, bottom and y are implemented.             Default 4 <pre><code>.Padding(15)\n</code></pre></p>"},{"location":"chartjs/scales/title/#padding_1","title":"Padding","text":"<pre><code>.Padding(default)\n</code></pre>"},{"location":"datatables/","title":"RazorKit.DataTables","text":"<p>RazorKit.DataTables is a powerful library that simplifies the integration of the jQuery DataTables library into Razor views. With a fluent builder style, developers can effortlessly create highly functional and customizable data tables.</p>"},{"location":"datatables/#features","title":"Features","text":"<ul> <li>Fluent API: Create tables using an intuitive builder pattern.</li> <li>Customization: Easily configure columns, data sources, and advanced features.</li> <li>Integration: Designed to work seamlessly with jQuery DataTables.</li> </ul>"},{"location":"datatables/#setup","title":"Setup","text":"<p>Install the NuGet package:</p> <p><pre><code>dotnet add package RazorKit.DataTables\n</code></pre> or <pre><code>PM&gt; Install-Package RazorKit.DataTables\n</code></pre></p> <p>Add needed script and style links to layout: Configuration:</p> <p><pre><code>&lt;link rel=\"stylesheet\" href=\"//cdn.datatables.net/2.1.8/css/dataTables.dataTables.min.css\" /&gt;\n&lt;script src=\"//cdn.datatables.net/2.1.8/js/dataTables.min.js\"&gt;&lt;/script&gt;\n</code></pre> It is easy to implement with html helper:</p> cshtml<pre><code>@using RazorKit\n\n@(Html.DataTable&lt;Person&gt;()\n    .Columns(c =&gt;\n    {\n        c.Field(f =&gt; f.Id).Visible(false);\n        c.Field(f =&gt; f.Name).Title(\"Name\");\n    })\n    .DataSource(ds =&gt; ds\n        .URL(Url.Action(\"GetDataResult\"))\n        .Method(\"POST\")\n        .Naming(Convention.CamelCase))\n    .ServerSide(true)\n    .Render()\n)\n</code></pre> <p>If you want to perform the request on backend, just call <code>ToDataResult()</code> return the response:</p> controller<pre><code>using RazorKit.DataTables;\n\n[HttpPost]\npublic JsonResult GetDataResult(DataRequest request)\n{\n     var result = ctx.People.ToDataResult(request);\n     return Json(result);\n}\n</code></pre>"},{"location":"datatables/callbacks/","title":"Callbacks","text":"<p>Reference </p> <p>In jQuery DataTables, \"callbacks\" refer to functions that are executed at specific points in the DataTable's lifecycle or during user interaction.  These callbacks allow you to customize behavior, process data, or manipulate the table during various events, such as data loading, drawing, or user interaction. Callbacks give you precise control over the table's behavior and allow you to:</p> <ul> <li>Manipulate data dynamically.</li> <li>Customize table appearance or behavior.</li> <li>Integrate additional features like custom search or row highlighting.</li> </ul> <p>Callbacks configuration: <pre><code>.Callbacks(x =&gt; x.CreatedRow(\"createdRow\").InitComplete(\"initComplete\"))\n</code></pre> <pre><code>function initComplete() {\n    console.log('Table initialization complete!');\n}\n</code></pre> <pre><code>function createdRow (row, data, dataIndex) {\n    if (data[4] === \"Admin\") {\n        $(row).addClass('highlight');\n    }\n}\n</code></pre></p>"},{"location":"datatables/callbacks/#createdrow","title":"CreatedRow","text":"<p>Callback for whenever a TR element is created for the table's body.  <pre><code>.CreatedRow(\"functionName\")\n</code></pre></p>"},{"location":"datatables/callbacks/#drawcallback","title":"DrawCallback","text":"<p>Function that is called every time DataTables performs a draw.   <pre><code>.DrawCallback(\"functionName\")\n</code></pre></p>"},{"location":"datatables/callbacks/#footercallback","title":"FooterCallback","text":"<p>Footer display callback function.  <pre><code>.FooterCallback(\"functionName\")\n</code></pre></p>"},{"location":"datatables/callbacks/#formatnumber","title":"FormatNumber","text":"<p>Number formatting callback function.  <pre><code>.FormatNumber(\"functionName\")\n</code></pre></p>"},{"location":"datatables/callbacks/#headercallback","title":"HeaderCallback","text":"<p>Header display callback function.  <pre><code>.HeaderCallback(\"functionName\")\n</code></pre></p>"},{"location":"datatables/callbacks/#infocallback","title":"InfoCallback","text":"<p>Table summary information display callback.  <pre><code>.InfoCallback(\"functionName\")\n</code></pre></p>"},{"location":"datatables/callbacks/#initcomplete","title":"InitComplete","text":"<p>Initialisation complete callback.  <pre><code>.InitComplete(\"functionName\")\n</code></pre></p>"},{"location":"datatables/callbacks/#predrawcallback","title":"PreDrawCallback","text":"<p>Pre-draw callback.  <pre><code>.PreDrawCallback(\"functionName\")\n</code></pre></p>"},{"location":"datatables/callbacks/#rowcallback","title":"RowCallback","text":"<p>Row draw callback.  <pre><code>.RowCallback(\"functionName\")\n</code></pre></p>"},{"location":"datatables/callbacks/#stateloadcallback","title":"StateLoadCallback","text":"<p>Callback that defines where and how a saved state should be loaded.  <pre><code>.StateLoadCallback(\"functionName\")\n</code></pre></p>"},{"location":"datatables/callbacks/#stateloadparams","title":"StateLoadParams","text":"<p>State loaded - data manipulation callback.  <pre><code>.StateLoadParams(\"functionName\")\n</code></pre></p>"},{"location":"datatables/callbacks/#stateloaded","title":"StateLoaded","text":"<p>State loaded callback.  <pre><code>.StateLoaded(\"functionName\")\n</code></pre></p>"},{"location":"datatables/callbacks/#statesavecallback","title":"StateSaveCallback","text":"<p>Callback that defines how the table state is stored and where.  <pre><code>.StateSaveCallback(\"functionName\")\n</code></pre></p>"},{"location":"datatables/callbacks/#statesaveparams","title":"StateSaveParams","text":"<p>State save - data manipulation callback.  <pre><code>.StateSaveParams(\"functionName\")\n</code></pre></p>"},{"location":"datatables/columns/","title":"Columns","text":"<p>Reference </p> <p>The columns option in the initialisation parameter allows you to define details about the way individual columns behave. For a full list of column options that can be set, please see the related parameters below.</p> <p>Note that if you use columns to define your columns, you must have an entry in the array for every single column that you have in your table (these can be null if you don't wish to specify any options).</p> <p>Configure columns: <pre><code>@(Html.DataTable&lt;Person&gt;()\n    .Columns(c =&gt;\n    {\n        c.Field(f =&gt; f.Id).Visible(false);\n        c.Field(f =&gt; f.Name).Title(\"Name\");\n        c.Field(f =&gt; f.Age).Width(\"5%\");\n        c.Field(f =&gt; f.Title);\n    })\n...\n</code></pre></p>"},{"location":"datatables/columns/#field","title":"Field","text":"<p>Make a column with defined type properties. <pre><code>.Field(f =&gt; f.Name)\n</code></pre></p>"},{"location":"datatables/columns/#title","title":"Title","text":"<p>Set column header. Default is property name.  <pre><code>.Title(\"First Name\")\n</code></pre> Or use <code>DisplayAttribute</code> for properties. <pre><code>[Display(Name = \"First Name\")]\npublic string Name { get; set; }\n</code></pre></p>"},{"location":"datatables/columns/#name","title":"Name","text":"<p>Set a descriptive name for a column.  <pre><code>.Name(\"personName\")\n</code></pre></p>"},{"location":"datatables/columns/#visible","title":"Visible","text":"<p>Set column visible or hidden, default is true.  <pre><code>.Visible(true)\n</code></pre></p>"},{"location":"datatables/columns/#orderable","title":"Orderable","text":"<p>Set column orderable or not, default is true.  <pre><code>.Orderable(true)\n</code></pre></p>"},{"location":"datatables/columns/#searchable","title":"Searchable","text":"<p>Set column searchable or not, default is true.  <pre><code>.Searchable(true)\n</code></pre></p>"},{"location":"datatables/columns/#width","title":"Width","text":"<p>This parameter can be used to define the width of a column, and may take any CSS value (10%, 3em, 20px etc).  <pre><code>.Width(\"10%\")\n</code></pre></p>"},{"location":"datatables/columns/#classname","title":"ClassName","text":"<p>Set css class of column.  <pre><code>.Class(\"text-danger\")\n</code></pre></p>"},{"location":"datatables/columns/#defaultcontent","title":"DefaultContent","text":"<p>Set default value for null data.  <pre><code>.DefaultContent(\"No data\")\n</code></pre></p>"},{"location":"datatables/columns/#displayformat","title":"DisplayFormat","text":"<p>Customize datetime format with Moment.js expression. <pre><code>.DisplayFormat(\"DD-MMM-Y\")\n</code></pre> Or use <code>DisplayFormatAttribute</code> for properties. (needed also moment.js) <pre><code>[DisplayFormat(DataFormatString = \"DD-MMM-Y\")]\npublic DateTime? BirthDate { get; set; }\n</code></pre></p>"},{"location":"datatables/columns/#template","title":"Template","text":"<p>Customize column template using \"data\" for comparison. <pre><code>.Template(\"(data === true) ? '&lt;span class=\\\"bi bi-bookmark-check-fill\\\"&gt;&lt;/span&gt;' : '&lt;span class=\\\"bi bi-bookmark-x\\\"&gt;&lt;/span&gt;'\");\n</code></pre></p>"},{"location":"datatables/columns/#contentpadding","title":"ContentPadding","text":"<p>Add padding to the text content used when calculating the optimal width for a table.  <pre><code>.ContentPadding(\"mmm\")\n</code></pre></p>"},{"location":"datatables/columns/#createdcell","title":"CreatedCell","text":"<p>Cell created callback to allow DOM manipulation.  <pre><code>.CreatedCell(\"functionName\")\n</code></pre></p>"},{"location":"datatables/columns/#footer","title":"Footer","text":"<p>Set the column footer text.  <pre><code>.Footer(\"footer text\")\n</code></pre></p>"},{"location":"datatables/columns/#type","title":"Type","text":"<p>Set the column type - used for filtering and sorting string processing.  <pre><code>.Type(ColumnType.Date)\n</code></pre></p>"},{"location":"datatables/columns/#responsivepriority","title":"ResponsivePriority","text":"<p>Set column's visibility priority.  <pre><code>.ResponsivePriority(1)\n</code></pre></p>"},{"location":"datatables/command-group/","title":"Command Group","text":"<p>Command Group configuration: <pre><code>.Columns(c =&gt;\n{\n    c.CommandGroup(cg =&gt; cg\n        .Text(\"Report\").BtnClass(\"btn btn-sm btn-secondary\").Width(\"1%\")\n        .Item(\"Excel\", \"getReport\")\n        .Item(\"Pdf\", \"getReport\"));\n})\n</code></pre></p>"},{"location":"datatables/command-group/#text","title":"Text","text":"<p>Set command text. <pre><code>.Text(\"Report\")\n</code></pre></p>"},{"location":"datatables/command-group/#iconclass","title":"IconClass","text":"<p>Set icon css class. <pre><code>.IconClass(\"bi bi-file-pdf\")\n</code></pre></p>"},{"location":"datatables/command-group/#btnclass","title":"BtnClass","text":"<p>Set button css class. <pre><code>.BtnClass(\"btn btn-sm btn-secondary\")\n</code></pre></p>"},{"location":"datatables/command-group/#width","title":"Width","text":"<p>Set percentage of column where the command is. <pre><code>.Width(\"1%\")\n</code></pre></p>"},{"location":"datatables/command-group/#item","title":"Item","text":"<p>Add a Command Group item. <pre><code>.Item(\"Excel\", \"getReport\")\n</code></pre></p>"},{"location":"datatables/command/","title":"Command","text":"<p>Command configuration: <pre><code>.Columns(c =&gt;\n{\n    c.Command(c =&gt; c.IconClass(\"bi bi-trash\").OnClick(\"onDelete\").BtnClass(\"btn btn-sm btn-danger\"));\n    c.Command(c =&gt; c.Text(\"Edit\").OnClick(\"onDelete\").BtnClass(\"btn btn-sm btn-success\"));\n})\n</code></pre></p>"},{"location":"datatables/command/#text","title":"Text","text":"<p>Set command text. <pre><code>.Text(\"Delete\")\n</code></pre></p>"},{"location":"datatables/command/#onclick","title":"OnClick","text":"<p>Set onClick function name. <pre><code>.OnClick(\"onDelete\")\n</code></pre></p>"},{"location":"datatables/command/#iconclass","title":"IconClass","text":"<p>Set icon css class. <pre><code>.IconClass(\"bi bi-trash\")\n</code></pre></p>"},{"location":"datatables/command/#btnclass","title":"BtnClass","text":"<p>Set button css class. <pre><code>.BtnClass(\"btn btn-sm btn-danger\")\n</code></pre></p>"},{"location":"datatables/command/#width","title":"Width","text":"<p>Set percentage of column where the command is. <pre><code>.Width(\"1%\")\n</code></pre></p>"},{"location":"datatables/datasource/","title":"DataSource","text":"<p>DataSource configuration: <pre><code>.DataSource(ds =&gt; ds\n    .URL(Url.Action(\"GetDataResult\"))\n    .Method(\"POST\"))\n</code></pre></p>"},{"location":"datatables/datasource/#url","title":"URL","text":"<p>Set data source URL. <pre><code>.URL(\"/Home/GetAll\")\n</code></pre></p>"},{"location":"datatables/datasource/#method","title":"Method","text":"<p>Set Ajax Http method. <pre><code>.Method(\"POST\")\n</code></pre></p>"},{"location":"datatables/datasource/#data","title":"Data","text":"cshtmlcontroller <p>Passing additional data to action and set the name of javascript function. <pre><code>.Data(\"addParam\")\n</code></pre> <pre><code>function addParam() {\n   return { param1: \"test1\", param2: true, param3: 5 };\n}\n</code></pre></p> <p>Get parameters with object named \"data\". <pre><code>public JsonResult GetAll(DataRequest request, AddData data)\n{\n    //\n}\n</code></pre></p>"},{"location":"datatables/datasource/#naming","title":"Naming","text":"<p>Set naming convention strategy. If not set uses default. <pre><code>.Naming(Convention.CamelCase)\n</code></pre></p>"},{"location":"datatables/filters/","title":"Filters","text":"<p>Filters configuration:</p> <pre><code>.Filters(f =&gt;\n{\n    f.Add(x =&gt; x.Id).GreaterThanOrEqual(1);\n    f.Add(x =&gt; x.Name).Contains(\"Jon\");\n})\n</code></pre>"},{"location":"datatables/filters/#add","title":"Add","text":"<pre><code>.Add(x =&gt; x.Id)\n</code></pre>"},{"location":"datatables/filters/#equal","title":"Equal","text":"<p>Equals the specified value. <pre><code>.Equal(1)\n</code></pre></p>"},{"location":"datatables/filters/#notequal","title":"NotEqual","text":"<p>Nots the equal. <pre><code>.NotEqual(1)\n</code></pre></p>"},{"location":"datatables/filters/#greaterthan","title":"GreaterThan","text":"<p>Greaters the than. <pre><code>.GreaterThan(1)\n</code></pre></p>"},{"location":"datatables/filters/#contains","title":"Contains","text":"<p>Determines whether this instance contains the object. <pre><code>.Contains(\"Jon\")\n</code></pre></p>"},{"location":"datatables/filters/#endswith","title":"EndsWith","text":"<p>Endses the with. <pre><code>.EndsWith(\"Snow\")\n</code></pre></p>"},{"location":"datatables/filters/#greaterthanorequal","title":"GreaterThanOrEqual","text":"<p>Greaters the than or equal. <pre><code>.GreaterThanOrEqual(5)\n</code></pre></p>"},{"location":"datatables/filters/#lessthan","title":"LessThan","text":"<p>Lesses the than. <pre><code>.LessThan(4)\n</code></pre></p>"},{"location":"datatables/filters/#lessthanorequal","title":"LessThanOrEqual","text":"<p>Lesses the than or equal. <pre><code>.LessThanOrEqual(5)\n</code></pre></p>"},{"location":"datatables/filters/#startswith","title":"StartsWith","text":"<p>Startses the with. <pre><code>.StartsWith(\"Jon\")\n</code></pre></p>"},{"location":"datatables/language/","title":"Language","text":"<p>Specify language json url from cdn or local. <pre><code>.Language(\"//cdn.datatables.net/plug-ins/1.10.22/i18n/Turkish.json\")\n</code></pre> Or configure: <pre><code>.Language(l =&gt; l.Search(\"Search By: \").EmptyTable(\"No records\"))\n</code></pre></p> <p>Reference </p> <p>All strings that DataTables uses in its user interface are defined in this object, allowing you to modified them individually or completely replace them all as required.  This ensures that DataTables is fully internationalisable as strings for any language can be used.</p> <p>The following is the default object that DataTables uses for its language strings (for information about each individual parameter, please see its individual documentation document): <pre><code>    {\n    \"decimal\":        \"\",\n    \"emptyTable\":     \"No data available in table\",\n    \"info\":           \"Showing _START_ to _END_ of _TOTAL_ entries\",\n    \"infoEmpty\":      \"Showing 0 to 0 of 0 entries\",\n    \"infoFiltered\":   \"(filtered from _MAX_ total entries)\",\n    \"infoPostFix\":    \"\",\n    \"thousands\":      \",\",\n    \"lengthMenu\":     \"Show _MENU_ entries\",\n    \"loadingRecords\": \"Loading...\",\n    \"processing\":     \"\",\n    \"search\":         \"Search:\",\n    \"zeroRecords\":    \"No matching records found\",\n    \"paginate\": {\n        \"first\":      \"First\",\n        \"last\":       \"Last\",\n        \"next\":       \"Next\",\n        \"previous\":   \"Previous\"\n    },\n    \"aria\": {\n        \"orderable\":  \"Order by this column\",\n        \"orderableReverse\": \"Reverse order this column\"\n    }\n}\n</code></pre></p>"},{"location":"datatables/language/#decimal","title":"Decimal","text":"<p>Set the decimal place character.   <pre><code>.Decimal(\",\")\n</code></pre></p>"},{"location":"datatables/language/#emptytable","title":"EmptyTable","text":"<p>This string is shown when the table is empty of data (regardless of filtering).   <pre><code>.EmptyTable(\"No data available in table\")\n</code></pre></p>"},{"location":"datatables/language/#info","title":"Info","text":"<p>This string gives information to the end user about the information that is current on display on the page.   <pre><code>.Info(\"Showing page _PAGE_ of _PAGES_\")\n</code></pre></p>"},{"location":"datatables/language/#infoempty","title":"InfoEmpty","text":"<p>Display information string for when the table is empty.   <pre><code>.InfoEmpty(\"No entries to show\")\n</code></pre></p>"},{"location":"datatables/language/#infofiltered","title":"InfoFiltered","text":"<p>When a user filters the information in a table, this string is appended to the information (info) to give an idea of how strong the filtering is.   <pre><code>.InfoFiltered(\" - filtered from _MAX_ records\")\n</code></pre></p>"},{"location":"datatables/language/#infopostfix","title":"InfoPostFix","text":"<p>If can be useful to append extra information to the info string at times, and this variable does exactly that.   <pre><code>.InfoPostFix(\"All records shown are derived from real information.\")\n</code></pre></p>"},{"location":"datatables/language/#thousands","title":"Thousands","text":"<p>The thousands separator option is used for output of information only.   <pre><code>.Thousands(\".\")\n</code></pre></p>"},{"location":"datatables/language/#lengthmenu","title":"LengthMenu","text":"<p>Detail the action that will be taken when the drop down menu for the pagination length option is changed.   <pre><code>.LengthMenu(\"Display _MENU_ records\")\n</code></pre></p>"},{"location":"datatables/language/#loadingrecords","title":"LoadingRecords","text":"<p>This message is shown in an empty row in the table to indicate to the end user the the data is being loaded.   <pre><code>.LoadingRecords(\"Please wait, loading...\")\n</code></pre></p>"},{"location":"datatables/language/#processing","title":"Processing","text":"<p>Text that is displayed when the table is processing a user action (usually a sort command or similar).   <pre><code>.Processing(\"DataTables is currently busy\")\n</code></pre></p>"},{"location":"datatables/language/#search","title":"Search","text":"<p>Sets the string that is used for DataTables filtering input control.   <pre><code>.Search(\"Filter records:\")\n</code></pre></p>"},{"location":"datatables/language/#zerorecords","title":"ZeroRecords","text":"<p>Text shown inside the table records when the is no information to be displayed after filtering.   <pre><code>.ZeroRecords(\"No records to display\")\n</code></pre></p>"},{"location":"datatables/language/#paginate","title":"Paginate","text":"<p>Pagination string used by DataTables for the built-in pagination control types.   <pre><code>.Paginate(\"first\", \"last\", \"next\", \"previous\")\n</code></pre></p>"},{"location":"datatables/language/#aria","title":"Aria","text":"<p>Language strings used for WAI-ARIA specific attributes.  </p>"},{"location":"datatables/language/#sortascending","title":"SortAscending","text":"<p>Set ARIA sort ascending string.  <pre><code>.Aria(a =&gt; a.SortAscending(\" - click/return to sort ascending\"))\n</code></pre></p>"},{"location":"datatables/language/#sortdescending","title":"SortDescending","text":"<p>Set ARIA sort descending string.  <pre><code>.Aria(a =&gt; a.SortDescending(\" - click/return to sort descending\"))\n</code></pre></p>"},{"location":"datatables/language/#orderable","title":"Orderable","text":"<p>Set ARIA orderable string.  <pre><code>.Aria(a =&gt; a.Orderable(\": Sort this column\"))\n</code></pre></p>"},{"location":"datatables/language/#orderablereverse","title":"OrderableReverse","text":"<p>Set ARIA orderableReverse string.  <pre><code>.Aria(a =&gt; a.OrderableReverse(\": Reverse sort this column\"))\n</code></pre></p>"},{"location":"datatables/language/#orderableremove","title":"OrderableRemove","text":"<p>Set ARIA orderableRemove string.  <pre><code>.Aria(a =&gt; a.OrderableRemove(\": Remove sort from this column\"))\n</code></pre></p>"},{"location":"datatables/layout/","title":"Layout","text":"<p>Reference </p> <p>The layout option provides the ability to control the items that surround and control the DataTable.  While offering a wide range of options to control the layout around the table, the basic operation of this option is quite simple: use the object parameter name to place a control and then the value to state what feature should be shown, and its configuration.</p>"},{"location":"datatables/layout/#top","title":"Top","text":"<p>Positions elements above the table but centers them horizontally.  This layout places the controls centered at the top of the table. <pre><code>.Top(Layouts.PageLength, Layouts.Search)\n</code></pre></p>"},{"location":"datatables/layout/#bottom","title":"Bottom","text":"<p>Positions elements above the table but centers them horizontally.  This layout places the controls centered at the bottom of the table. <pre><code>.Bottom(Layouts.Info, Layouts.Paging)\n</code></pre></p>"},{"location":"datatables/layout/#topstart","title":"TopStart","text":"<pre><code>.TopStart(Layouts.PageLength)\n</code></pre>"},{"location":"datatables/layout/#topend","title":"TopEnd","text":"<pre><code>.TopEnd(Layouts.Search)\n</code></pre>"},{"location":"datatables/layout/#bottomstart","title":"BottomStart","text":"<pre><code>.BottomStart(Layouts.Info)\n</code></pre>"},{"location":"datatables/layout/#bottomend","title":"BottomEnd","text":"<pre><code>.BottomEnd(Layouts.Paging)\n</code></pre>"},{"location":"datatables/options/","title":"Options","text":"<p>Reference </p> <p>DataTables and its extensions are extremely configurable libraries and almost every aspect of the enhancements they make to HTML tables can be customised.  Features can be enabled, disabled or customised to meet your exact needs for your table implementations.</p>"},{"location":"datatables/options/#name","title":"Name","text":"<p>Default name/id is <code>\"DataTableId\"</code>. <pre><code>.Name(\"MyDataTable\")\n</code></pre> If there are multiple grid in single page, different names should be given. Call grid if you need like this: <pre><code>$(document).ready(function() {\n    var table = $('#MyDataTable').DataTable();\n});\n</code></pre></p>"},{"location":"datatables/options/#ordering","title":"Ordering","text":"<p>Disable or enable ordering, default is <code>true</code>.   <pre><code>.Ordering(true)\n</code></pre></p>"},{"location":"datatables/options/#orders","title":"Orders","text":"<p>If ordering is enabled (ordering), then DataTables will perform a first pass order during initialisation.  Using this parameter you can define which column(s) the order is performed upon, and the ordering direction. <pre><code>.Orders(o =&gt; {\n    o.Add(p =&gt; p.Name, OrderBy.Descending);\n    o.Add(p =&gt; p.Age, OrderBy.Ascending);\n})\n</code></pre></p>"},{"location":"datatables/options/#searching","title":"Searching","text":"<p>Disable or enable searching, default is <code>true</code>.   <pre><code>.Searching(true)\n</code></pre></p>"},{"location":"datatables/options/#dom","title":"Dom","text":"<p>Dom allow to control position of datatable elements.   <pre><code>.Dom(\"lrtip\")\n</code></pre></p>"},{"location":"datatables/options/#style","title":"Style","text":"<p>Set css class of table, default is <code>\"display dataTable\"</code>. <pre><code>.Style(\"table table-striped\")\n</code></pre></p>"},{"location":"datatables/options/#paging","title":"Paging","text":"<p>Disable or enable paging, default is <code>true</code>.   <pre><code>.Paging(true)\n</code></pre></p>"},{"location":"datatables/options/#serverside","title":"ServerSide","text":"<p>Enable server-side processing mode, default is <code>false</code>.   <pre><code>.ServerSide(true)\n</code></pre></p>"},{"location":"datatables/options/#pagelength","title":"PageLength","text":"<p>Define table page length. default is <code>10</code>.   <pre><code>.PageLength(20)\n</code></pre></p>"},{"location":"datatables/options/#processing","title":"Processing","text":"<p>Enable or disable the display of a 'processing' indicator when the table is being processed, default is <code>true</code>.   <pre><code>.Processing(true)\n</code></pre></p>"},{"location":"datatables/options/#scrollx","title":"ScrollX","text":"<p>Enable horizontal scrolling. When a table is too wide to fit into a certain layout, or you have a large number of columns in the table,  you can enable horizontal (x) scrolling to show the table in a viewport, which can be scrolled, default is <code>false</code>.   <pre><code>.ScrollX(true)\n</code></pre></p>"},{"location":"datatables/options/#statesave","title":"StateSave","text":"<p>Enable or disable state saving such as pagination position, display length, filtering and sorting information, default is <code>false</code>.  <pre><code>.StateSave(true)\n</code></pre></p>"},{"location":"datatables/options/#caption","title":"Caption","text":"<p>Set a caption for the table.  <pre><code>.Caption(\"Table 1: Pupil averages\")\n</code></pre></p>"},{"location":"datatables/options/#lengthmenu","title":"LengthMenu","text":"<p>Change the options in the page length select list. <pre><code>.LengthMenu(lm =&gt; lm.Items(10, 25, 50, 100))\n</code></pre> <pre><code>.LengthMenu(lm =&gt; lm.Items(10, 25, 50, 100).ShowAll())\n</code></pre> <pre><code>.LengthMenu(lm =&gt; lm.Items(10, 25, 50, 100).ShowAll(\"All Records\"))\n</code></pre></p>"},{"location":"datatables/extensions/buttons/","title":"Buttons","text":"<p>Reference </p> <p>A common UI paradigm to use with interactive tables is to present buttons that will trigger some action - that may be to alter the table's state,  modify the data in the table, gather the data from the table or even to activate some external process.  Showing such buttons is an interface that end users are comfortable with, making them feel at home with the table.</p> <p>Use built-in buttons:  <pre><code>.Buttons(\"copy\", \"csv\", \"print\")\n</code></pre> Or, configure it: <pre><code>.Button(b =&gt; b.Text(\"Report\").Action(\"getReport\"))\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#action","title":"Action","text":"<p>Action to take when the button is activated.  <pre><code>.Action(\"actionName\")\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#async","title":"Async","text":"<p>Indicate that a button's action processing should be performed asynchronously.  <pre><code>.Async(100)\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#attr","title":"Attr","text":"<p>Collection of attribute key / values to set for a button  <pre><code>.Attr(\"Title\", \"id\")\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#available","title":"Available","text":"<p>Ensure that any requirements have been satisfied before initialising a button.  <pre><code>.Available(\"functionName\")\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#classname","title":"ClassName","text":"<p>Set the class name for the button.  <pre><code>.ClassName(\"copyButton\")\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#destroy","title":"Destroy","text":"<p>Function that is called when the button is destroyed.  <pre><code>.Destroy(\"functionName\")\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#dropicon","title":"DropIcon","text":"<p>Show a dropdown (further action) icon.  <pre><code>.DropIcon(true)\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#enabled","title":"Enabled","text":"<p>Set a button's initial enabled state.  <pre><code>.Enabled(false)\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#extend","title":"Extend","text":"<p>Define which button type the button should be based on.  <pre><code>.Extend(\"excel\")\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#init","title":"Init","text":"<p>Initialisation function that can be used to add events specific to this button.  <pre><code>.Init(\"functionName\")\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#key","title":"Key","text":"<p>Define an activation key for a button.  <pre><code>.Key(\"p\")\n</code></pre> <pre><code>.Key(\"p\", altKey: true)\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#name","title":"Name","text":"<p>Set a name for each selection.  <pre><code>.Name(\"copy\")\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#namespace","title":"Namespace","text":"<p>Unique namespace for every button.  <pre><code>.Namespace(\"example\")\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#split","title":"Split","text":"<p>Split dropdown buttons (built-in).  <pre><code>.Split(\"copy\", \"csv\", \"print\")\n</code></pre></p> <p>Split dropdown buttons with configuration. <pre><code>.Split(x =&gt; x.Add(\"pdf\", \"report\").Add(\"word\", \"report\"))\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#buttons","title":"Buttons","text":"<p>Dropdown buttons (built-in).  <pre><code>.Buttons(\"copy\", \"csv\", \"print\")\n</code></pre> Dropdown buttons with configuration. <pre><code>.Buttons(x =&gt; x.Add(\"pdf\", \"report\").Add(\"word\", \"report\"))\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#tag","title":"Tag","text":"<p>Set the tag for the button.  <pre><code>.Tag(\"a\")\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#text","title":"Text","text":"<p>The text to show in the button.  <pre><code>.Text(\"Print\")\n</code></pre></p>"},{"location":"datatables/extensions/buttons/#titleattr","title":"TitleAttr","text":"<p>Button title attribute text.  <pre><code>.TitleAttr(\"Copy\")\n</code></pre></p>"},{"location":"datatables/extensions/colreorder/","title":"ColReorder","text":"<p>Reference </p> <p>ColReorder adds the ability for the end user to be able to reorder columns in a DataTable through a click and drag operation. This can be useful when presenting data in a table, letting the user move columns that they wish to compare next to each other for easier comparison.</p> <p>Enable the ColReorder extension for DataTables.  <pre><code>.ColReorder(true)\n</code></pre> Or, configure it. <pre><code>.ColReorder(x =&gt; x.Order(5, 4, 3, 2, 1, 0))\n</code></pre></p>"},{"location":"datatables/extensions/colreorder/#enable","title":"Enable","text":"<p>Initial enablement state of ColReorder.  <pre><code>.Enable(true)\n</code></pre></p>"},{"location":"datatables/extensions/colreorder/#order","title":"Order","text":"<p>Set a default order for the columns in the table.  <pre><code>.Order(5, 4, 3, 2, 1, 0)\n</code></pre></p>"},{"location":"datatables/extensions/colreorder/#columns","title":"Columns","text":"<p>Select which columns can be reordered.  <pre><code>.Columns(\":gt(1)\")\n</code></pre></p>"},{"location":"datatables/extensions/fixedcolumns/","title":"FixedColumns","text":"<p>Reference </p> <p>When making use of DataTables' x-axis scrolling feature (<code>scrollX</code>), you may wish to fix the left or right most columns in place. This extension for DataTables provides exactly this option (for non-scrolling tables, please use the FixedHeader extension, which will create sticky headers and footers for tables).</p> <p>Enable the FixedColumns extension for DataTables.  <pre><code>.FixedColumns(true)\n</code></pre> Or, configure it. <pre><code>.FixedColumns(f =&gt; f.Start(0).End(1))\n</code></pre></p>"},{"location":"datatables/extensions/fixedcolumns/#start","title":"Start","text":"<p>Number of columns to fix to the start of the table.  <pre><code>.Start(0)\n</code></pre></p>"},{"location":"datatables/extensions/fixedcolumns/#end","title":"End","text":"<p>Number of columns to fix to the end of the table.  <pre><code>.End(1)\n</code></pre></p>"},{"location":"datatables/extensions/fixedcolumns/#left","title":"Left","text":"<p>Number of columns to fix to the left of the table.  <pre><code>.Left(2)\n</code></pre></p>"},{"location":"datatables/extensions/fixedcolumns/#right","title":"Right","text":"<p>Number of columns to fix to the right of the table.  <pre><code>.Right(1)\n</code></pre></p>"},{"location":"datatables/extensions/fixedcolumns/#leftcolumns","title":"LeftColumns","text":"<p>Number of columns to fix to the left of the table.  <pre><code>.LeftColumns(2)\n</code></pre></p>"},{"location":"datatables/extensions/fixedcolumns/#rightcolumns","title":"RightColumns","text":"<p>Number of columns to fix to the right of the table.  <pre><code>.RightColumns(1)\n</code></pre></p>"},{"location":"datatables/extensions/fixedheader/","title":"FixedHeader","text":"<p>Reference </p> <p>When displaying tables with a particularly large amount of data shown on each page,  it can be useful to have the table's header and / or footer fixed to the top or bottom of the scrolling window.  This lets your users quickly determine what each column refers to rather than needing to scroll back to the top of the table.</p> <p>Enable the FixedHeader extension for DataTables.  <pre><code>.FixedHeader(true)\n</code></pre> Or, configure it. <pre><code>.FixedHeader(fh =&gt; fh.Header(true).HeaderOffset(50))\n</code></pre></p>"},{"location":"datatables/extensions/fixedheader/#header","title":"Header","text":"<p>Enable / disable fixed header.  <pre><code>.Header(true)\n</code></pre></p>"},{"location":"datatables/extensions/fixedheader/#footer","title":"Footer","text":"<p>Enable / disable fixed footer.  <pre><code>.Footer(true)\n</code></pre></p>"},{"location":"datatables/extensions/fixedheader/#headeroffset","title":"HeaderOffset","text":"<p>Offset the table's fixed header.  <pre><code>.HeaderOffset(50)\n</code></pre> Offset the table's fixed header with function. <pre><code>.HeaderOffset(\"functionName\")\n</code></pre></p>"},{"location":"datatables/extensions/fixedheader/#footeroffset","title":"FooterOffset","text":"<p>Offset the table's fixed footer.  <pre><code>.FooterOffset(50)\n</code></pre> Offset the table's fixed footer with function. <pre><code>.FooterOffset(\"functionName\")\n</code></pre></p>"},{"location":"datatables/extensions/keytable/","title":"KeyTable","text":"<p>Reference </p> <p>Spreadsheet navigation of a DataTable makes for an attractive and rapid data input interface,  and also a very familiar one for those users experienced in Excel, OpenOffice or similar, who are now transitioning to web based apps.</p> <p>KeyTable adds keyboard navigation to DataTables, operating in exactly the same way as traditional spreadsheet applications.</p> <p>Enable the KeyTable extension for DataTables.  <pre><code>.KeyTable(true)\n</code></pre> Or, configure it. <pre><code>.KeyTable(kt =&gt; kt.Blurable(false).Clipboard(false))\n</code></pre></p>"},{"location":"datatables/extensions/keytable/#blurable","title":"Blurable","text":"<p>Allow KeyTable's focus to be blurred (removed) from a table.  <pre><code>.Blurable(false)\n</code></pre></p>"},{"location":"datatables/extensions/keytable/#classname","title":"ClassName","text":"<p>Set the class name used for the focused cell.  <pre><code>.ClassName(\"highlight\")\n</code></pre></p>"},{"location":"datatables/extensions/keytable/#clipboard","title":"Clipboard","text":"<p>Enable / disable clipboard interaction with KeyTable.  <pre><code>.Clipboard(false)\n</code></pre></p>"},{"location":"datatables/extensions/keytable/#clipboardorthogonal","title":"ClipboardOrthogonal","text":"<p>Set the orthogonal data to copy to clipboard.  <pre><code>.ClipboardOrthogonal(\"export\")\n</code></pre></p>"},{"location":"datatables/extensions/keytable/#columns","title":"Columns","text":"<p>Select the columns that can gain focus.  <pre><code>.Columns(\":not(:last-child)\")\n</code></pre></p>"},{"location":"datatables/extensions/keytable/#editonfocus","title":"EditOnFocus","text":"<p>Control if editing should be activated immediately upon focus.  <pre><code>.EditOnFocus(true)\n</code></pre></p>"},{"location":"datatables/extensions/keytable/#editor","title":"Editor","text":"<p>Attach an Editor instance for Excel like editing.  <pre><code>.Editor(\"editor\")\n</code></pre></p>"},{"location":"datatables/extensions/keytable/#focus","title":"Focus","text":"<p>Cell to receive initial focus in the table.  <pre><code>.Focus(\":eq(0)\")\n</code></pre></p>"},{"location":"datatables/extensions/keytable/#keys","title":"Keys","text":"<p>Limit the keys that KeyTable will listen for and take action on.  <pre><code>.Keys(0, 1)\n</code></pre></p>"},{"location":"datatables/extensions/keytable/#tabindex","title":"TabIndex","text":"<p>Set the table's tab index for when it will receive focus.  <pre><code>.TabIndex(-1)\n</code></pre></p>"},{"location":"datatables/extensions/responsive/","title":"Responsive","text":"<p>Reference </p> <p>In the modern world of responsive web design tables can often cause a particular problem for designers due to their row based layout. Responsive is an extension for DataTables that resolves that problem by optimising the table's layout for different screen sizes through the dynamic insertion and removal of columns from the table.</p> <p>Enable the Responsive extension for DataTables.  <pre><code>.Responsive(true)\n</code></pre> Or, configure it. <pre><code>.Responsive(r =&gt; r.Details(true).Orthogonal(\"responsive\"))\n</code></pre></p>"},{"location":"datatables/extensions/responsive/#orthogonal","title":"Orthogonal","text":"<p>Set the orthogonal data request type for the hidden information display.  <pre><code>.Orthogonal(\"responsive\")\n</code></pre></p>"},{"location":"datatables/extensions/responsive/#breakpoints","title":"Breakpoints","text":"<p>Configure the breakpoints for a Responsive instance.  <pre><code>.Breakpoints(b =&gt; b.Add(\"mobile-p\", 320).Add(\"mobile-l\", 480))\n</code></pre></p>"},{"location":"datatables/extensions/responsive/#details","title":"Details","text":"<p>Enable the child rows shown by Responsive for collapsed tables.  <pre><code>.Details(true)\n</code></pre> Or, configure it.</p>"},{"location":"datatables/extensions/responsive/#display","title":"Display","text":"<p>Define how the hidden information should be displayed to the end user.  <pre><code>.Details(d =&gt; d.Display(\"DataTable.Responsive.display.childRowImmediate\"))\n</code></pre></p>"},{"location":"datatables/extensions/responsive/#renderer","title":"Renderer","text":"<p>Define the renderer used to display the child rows.  <pre><code>.Details(d =&gt; d.Renderer(\"DataTable.Responsive.renderer.tableAll()\"))\n</code></pre></p>"},{"location":"datatables/extensions/responsive/#target","title":"Target","text":"<p>Column / selector for child row display control when using 'column' details type.  <pre><code>.Details(d =&gt; d.Target(-1))\n</code></pre></p>"},{"location":"datatables/extensions/responsive/#type","title":"Type","text":"<p>Set the child row display control type.  <pre><code>.Details(d =&gt; d.Type(DetailType.Column))\n</code></pre></p>"},{"location":"datatables/extensions/rowreorder/","title":"RowReorder","text":"<p>Reference </p> <p>DataTables is often used to show sequential data, and naturally from that comes the desire to be able to reorder that data - for this the RowReorder extension is available. It provides the end user with the ability to click and drag (or touch and drag on mobile devices) a row in the table and change its position.  Full integration with Editor's multi-row editing abilities is also available to have updates automatically written to a database.</p> <p>Enable the RowReorder extension for DataTables.  <pre><code>.RowReorder(true)\n</code></pre> Or, configure it. <pre><code>.RowReorder(r =&gt; r.DataSrc(\"sequence\").Editor(\"editor\"))\n</code></pre></p>"},{"location":"datatables/extensions/rowreorder/#cancelable","title":"Cancelable","text":"<p>Enable / disable the canceling of the drag and drop interaction.  <pre><code>.Cancelable(false)\n</code></pre></p>"},{"location":"datatables/extensions/rowreorder/#datasrc","title":"DataSrc","text":"<p>Configure the data point that will be used for the reordering data.  <pre><code>.DataSrc(\"sequence\")\n</code></pre></p>"},{"location":"datatables/extensions/rowreorder/#editor","title":"Editor","text":"<p>Attach an Editor instance for database updating.  <pre><code>.Editor(\"editor\")\n</code></pre></p>"},{"location":"datatables/extensions/rowreorder/#enable","title":"Enable","text":"<p>Enable / disable RowReorder's user interaction.  <pre><code>.Enable(false)\n</code></pre></p>"},{"location":"datatables/extensions/rowreorder/#formoptions","title":"FormOptions","text":"<p>Set the options for the Editor form when submitting data.  <pre><code>.FormOptions(\"allIfChanged\")\n</code></pre></p>"},{"location":"datatables/extensions/rowreorder/#selector","title":"Selector","text":"<p>Define the selector used to pick the elements that will start a drag.  <pre><code>.Selector(\"td:last-child\")\n</code></pre></p>"},{"location":"datatables/extensions/rowreorder/#snapx","title":"SnapX","text":"<p>Horizontal position control of the row being dragged.  <pre><code>.SnapX(true)\n</code></pre></p>"},{"location":"datatables/extensions/rowreorder/#update","title":"Update","text":"<p>Control automatic of data when a row is dropped.  <pre><code>.Update(false)\n</code></pre></p>"},{"location":"datatables/extensions/select/","title":"Select","text":"<p>Reference </p> <p>Select adds item selection capabilities to a DataTable. Items can be rows, columns or cells, which can be selected independently, or together.  Item selection can be particularly useful in interactive tables where users can perform some action on the table,  such as editing rows or marking items to perform an action on.</p> <p>Enable selection.  <pre><code>.Select(true)\n</code></pre> Or, configure it. <pre><code>.Select(s =&gt; s.Style(SelectStyle.Multi).HeaderCheckbox())\n</code></pre></p>"},{"location":"datatables/extensions/select/#classname","title":"ClassName","text":"<p>Set the class name that will be applied to selected items.  <pre><code>.ClassName(\"row-selected\")\n</code></pre></p>"},{"location":"datatables/extensions/select/#blurable","title":"Blurable","text":"<p>Indicate if the selected items will be removed when clicking outside of the table.  <pre><code>.Blurable(true)\n</code></pre></p>"},{"location":"datatables/extensions/select/#headercheckbox","title":"HeaderCheckbox","text":"<p>Control automatic addition of header checkbox.  <pre><code>.HeaderCheckbox()\n</code></pre> Limit with page selection. <pre><code>.HeaderCheckbox(selectPage: true)\n</code></pre></p>"},{"location":"datatables/extensions/select/#info","title":"Info","text":"<p>Enable / disable the display for item selection information in the table summary.  <pre><code>.Info(false)\n</code></pre></p>"},{"location":"datatables/extensions/select/#items","title":"Items","text":"<p>Set which table items to select (rows, columns or cells).  <pre><code>.Items(SelectItems.Row)\n</code></pre></p>"},{"location":"datatables/extensions/select/#selector","title":"Selector","text":"<p>Set the element selector used for mouse event capture to select items.  <pre><code>.Selector(\"td:first-child\")\n</code></pre></p>"},{"location":"datatables/extensions/select/#style","title":"Style","text":"<p>Set the selection style for end user interaction with the table.  <pre><code>.Style(SelectStyle.Multi)\n</code></pre></p>"},{"location":"datatables/extensions/select/#toggleable","title":"Toggleable","text":"<p>Disable the deselection of selected rows when clicked.  <pre><code>.Toggleable(false)\n</code></pre></p>"},{"location":"datatables/extensions/select/#selectable","title":"Selectable","text":"<p>Set a function that will determine if a row should be selectable.  <pre><code>.Selectable(\"selectAction\")\n</code></pre></p>"}]}