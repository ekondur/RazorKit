@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    function handleHover(evt, item, legend) {
        console.log("test");
    }
</script>

@using HelperJS

@{
    var line =
    Html.JS().Chart("canvasId")
    .Data(d => d
        .Labels("a", "b", "c", "d")
        .Datasets(ds =>
        {
            // ds.Line()
            // .Label("chart 1")
            // .Data(new { x = "2016-12-25", y = 20 }, new { x = "2016-12-26", y = 10 }, new { x = "2016-12-27", y = 8 })
            // .Tension(0.1);
            ds.Line().Label("chart 1").Data(2.0, 2.5, 1.5, 3).BackgroundColor("red").Tension(0.1);
            ds.Line().Label("chart 2").Data(1.0, 2, 1.5, 2).BackgroundColor("green");
        }))
    .Options(o => o
        .Plugins(p => p
            .Title(t => t.Text("title").Display(true).Position(TitlePosition.Top)
                .Padding(padding => padding.Bottom(5))
                .Font(f => f.Weight(900).Size(20.5)))
            .Legend(l => l.Display(true).OnHover("handleHover")))
        .Layout(l => l.Padding(50)).Locale("tr-TR")
    );
}

@line.Render()

@{
    var animateLine =
            Html.JS().Chart("canvasId2")
            .Data(d => d
                .Labels("January", "February", "March", "April", "May", "June", "July")
                .Datasets(ds => ds
                    .Line().Label("Looping tension")
                    .Data(65, 59, 80, 81, 26, 55, 40)
                    .Fill(false)
                    .BorderColor("rgb(75, 192, 192)")
                )
            )
            .Options(o => o
                .Animations(Animations.Tension, a => a
                    .Duration(1000)
                    .Easing(Easing.Linear)
                    .Loop(true)
                    .From(1)
                    .To(0))
                .Scales(Scales.Y, s => s
                    .Min(0)
                    .Max(100)
                )
            );
}

@animateLine.Render()